// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sobel_Block_Mat_exit49_proc88 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rows,
        cols,
        C_XR2C0,
        C_YR0C0,
        C_YR0C2,
        C_YR1C0,
        C_YR1C2,
        C_YR2C0,
        C_YR2C1,
        c_high_thresh,
        C_YR1C1,
        C_XR1C2,
        C_YR0C1,
        C_XR2C2,
        C_XR0C0,
        C_XR0C1,
        C_XR0C2,
        C_XR1C0,
        C_XR2C1,
        C_XR1C1,
        c_low_thresh,
        c_invert,
        empty_3,
        empty_4,
        empty,
        img_0_rows_V_out_din,
        img_0_rows_V_out_full_n,
        img_0_rows_V_out_write,
        img_0_rows_V_out1_din,
        img_0_rows_V_out1_full_n,
        img_0_rows_V_out1_write,
        img_0_cols_V_out_din,
        img_0_cols_V_out_full_n,
        img_0_cols_V_out_write,
        img_0_cols_V_out2_din,
        img_0_cols_V_out2_full_n,
        img_0_cols_V_out2_write,
        C_XR2C0_out_din,
        C_XR2C0_out_full_n,
        C_XR2C0_out_write,
        C_YR0C0_out_din,
        C_YR0C0_out_full_n,
        C_YR0C0_out_write,
        C_YR0C2_out_din,
        C_YR0C2_out_full_n,
        C_YR0C2_out_write,
        C_YR1C0_out_din,
        C_YR1C0_out_full_n,
        C_YR1C0_out_write,
        C_YR1C2_out_din,
        C_YR1C2_out_full_n,
        C_YR1C2_out_write,
        C_YR2C0_out_din,
        C_YR2C0_out_full_n,
        C_YR2C0_out_write,
        C_YR2C1_out_din,
        C_YR2C1_out_full_n,
        C_YR2C1_out_write,
        c_high_thresh_out_din,
        c_high_thresh_out_full_n,
        c_high_thresh_out_write,
        C_YR1C1_out_din,
        C_YR1C1_out_full_n,
        C_YR1C1_out_write,
        C_XR1C2_out_din,
        C_XR1C2_out_full_n,
        C_XR1C2_out_write,
        C_YR0C1_out_din,
        C_YR0C1_out_full_n,
        C_YR0C1_out_write,
        C_XR2C2_out_din,
        C_XR2C2_out_full_n,
        C_XR2C2_out_write,
        C_XR0C0_out_din,
        C_XR0C0_out_full_n,
        C_XR0C0_out_write,
        C_XR0C1_out_din,
        C_XR0C1_out_full_n,
        C_XR0C1_out_write,
        C_XR0C2_out_din,
        C_XR0C2_out_full_n,
        C_XR0C2_out_write,
        C_XR1C0_out_din,
        C_XR1C0_out_full_n,
        C_XR1C0_out_write,
        C_XR2C1_out_din,
        C_XR2C1_out_full_n,
        C_XR2C1_out_write,
        C_XR1C1_out_din,
        C_XR1C1_out_full_n,
        C_XR1C1_out_write,
        c_low_thresh_out_din,
        c_low_thresh_out_full_n,
        c_low_thresh_out_write,
        c_invert_out_din,
        c_invert_out_full_n,
        c_invert_out_write,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_out1_din,
        p_out1_full_n,
        p_out1_write,
        p_out2_din,
        p_out2_full_n,
        p_out2_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] rows;
input  [31:0] cols;
input  [31:0] C_XR2C0;
input  [31:0] C_YR0C0;
input  [31:0] C_YR0C2;
input  [31:0] C_YR1C0;
input  [31:0] C_YR1C2;
input  [31:0] C_YR2C0;
input  [31:0] C_YR2C1;
input  [31:0] c_high_thresh;
input  [31:0] C_YR1C1;
input  [31:0] C_XR1C2;
input  [31:0] C_YR0C1;
input  [31:0] C_XR2C2;
input  [31:0] C_XR0C0;
input  [31:0] C_XR0C1;
input  [31:0] C_XR0C2;
input  [31:0] C_XR1C0;
input  [31:0] C_XR2C1;
input  [31:0] C_XR1C1;
input  [31:0] c_low_thresh;
input  [31:0] c_invert;
input  [9:0] empty_3;
input  [8:0] empty_4;
input  [7:0] empty;
output  [11:0] img_0_rows_V_out_din;
input   img_0_rows_V_out_full_n;
output   img_0_rows_V_out_write;
output  [11:0] img_0_rows_V_out1_din;
input   img_0_rows_V_out1_full_n;
output   img_0_rows_V_out1_write;
output  [11:0] img_0_cols_V_out_din;
input   img_0_cols_V_out_full_n;
output   img_0_cols_V_out_write;
output  [11:0] img_0_cols_V_out2_din;
input   img_0_cols_V_out2_full_n;
output   img_0_cols_V_out2_write;
output  [31:0] C_XR2C0_out_din;
input   C_XR2C0_out_full_n;
output   C_XR2C0_out_write;
output  [31:0] C_YR0C0_out_din;
input   C_YR0C0_out_full_n;
output   C_YR0C0_out_write;
output  [31:0] C_YR0C2_out_din;
input   C_YR0C2_out_full_n;
output   C_YR0C2_out_write;
output  [31:0] C_YR1C0_out_din;
input   C_YR1C0_out_full_n;
output   C_YR1C0_out_write;
output  [31:0] C_YR1C2_out_din;
input   C_YR1C2_out_full_n;
output   C_YR1C2_out_write;
output  [31:0] C_YR2C0_out_din;
input   C_YR2C0_out_full_n;
output   C_YR2C0_out_write;
output  [31:0] C_YR2C1_out_din;
input   C_YR2C1_out_full_n;
output   C_YR2C1_out_write;
output  [31:0] c_high_thresh_out_din;
input   c_high_thresh_out_full_n;
output   c_high_thresh_out_write;
output  [31:0] C_YR1C1_out_din;
input   C_YR1C1_out_full_n;
output   C_YR1C1_out_write;
output  [31:0] C_XR1C2_out_din;
input   C_XR1C2_out_full_n;
output   C_XR1C2_out_write;
output  [31:0] C_YR0C1_out_din;
input   C_YR0C1_out_full_n;
output   C_YR0C1_out_write;
output  [31:0] C_XR2C2_out_din;
input   C_XR2C2_out_full_n;
output   C_XR2C2_out_write;
output  [31:0] C_XR0C0_out_din;
input   C_XR0C0_out_full_n;
output   C_XR0C0_out_write;
output  [31:0] C_XR0C1_out_din;
input   C_XR0C1_out_full_n;
output   C_XR0C1_out_write;
output  [31:0] C_XR0C2_out_din;
input   C_XR0C2_out_full_n;
output   C_XR0C2_out_write;
output  [31:0] C_XR1C0_out_din;
input   C_XR1C0_out_full_n;
output   C_XR1C0_out_write;
output  [31:0] C_XR2C1_out_din;
input   C_XR2C1_out_full_n;
output   C_XR2C1_out_write;
output  [31:0] C_XR1C1_out_din;
input   C_XR1C1_out_full_n;
output   C_XR1C1_out_write;
output  [31:0] c_low_thresh_out_din;
input   c_low_thresh_out_full_n;
output   c_low_thresh_out_write;
output  [31:0] c_invert_out_din;
input   c_invert_out_full_n;
output   c_invert_out_write;
output  [9:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
output  [8:0] p_out1_din;
input   p_out1_full_n;
output   p_out1_write;
output  [7:0] p_out2_din;
input   p_out2_full_n;
output   p_out2_write;
output  [11:0] ap_return_0;
output  [11:0] ap_return_1;
output  [11:0] ap_return_2;
output  [11:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_0_rows_V_out_write;
reg img_0_rows_V_out1_write;
reg img_0_cols_V_out_write;
reg img_0_cols_V_out2_write;
reg C_XR2C0_out_write;
reg C_YR0C0_out_write;
reg C_YR0C2_out_write;
reg C_YR1C0_out_write;
reg C_YR1C2_out_write;
reg C_YR2C0_out_write;
reg C_YR2C1_out_write;
reg c_high_thresh_out_write;
reg C_YR1C1_out_write;
reg C_XR1C2_out_write;
reg C_YR0C1_out_write;
reg C_XR2C2_out_write;
reg C_XR0C0_out_write;
reg C_XR0C1_out_write;
reg C_XR0C2_out_write;
reg C_XR1C0_out_write;
reg C_XR2C1_out_write;
reg C_XR1C1_out_write;
reg c_low_thresh_out_write;
reg c_invert_out_write;
reg p_out_write;
reg p_out1_write;
reg p_out2_write;
reg[11:0] ap_return_0;
reg[11:0] ap_return_1;
reg[11:0] ap_return_2;
reg[11:0] ap_return_3;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg    ap_sig_bdd_223;
wire   [11:0] img_0_rows_V_fu_492_p1;
wire   [11:0] img_0_cols_V_fu_498_p1;
reg   [11:0] ap_return_0_preg = 12'b000000000000;
reg   [11:0] ap_return_1_preg = 12'b000000000000;
reg   [11:0] ap_return_2_preg = 12'b000000000000;
reg   [11:0] ap_return_3_preg = 12'b000000000000;
reg   [0:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_return_0_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_0_preg
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
            ap_return_0_preg <= img_0_rows_V_fu_492_p1;
        end
    end
end

/// ap_return_1_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_1_preg
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
            ap_return_1_preg <= img_0_cols_V_fu_498_p1;
        end
    end
end

/// ap_return_2_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_2_preg
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
            ap_return_2_preg <= img_0_rows_V_fu_492_p1;
        end
    end
end

/// ap_return_3_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_3_preg
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
            ap_return_3_preg <= img_0_cols_V_fu_498_p1;
        end
    end
end

/// C_XR0C0_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_XR0C0_out_write = ap_const_logic_1;
    end else begin
        C_XR0C0_out_write = ap_const_logic_0;
    end
end

/// C_XR0C1_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_XR0C1_out_write = ap_const_logic_1;
    end else begin
        C_XR0C1_out_write = ap_const_logic_0;
    end
end

/// C_XR0C2_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_XR0C2_out_write = ap_const_logic_1;
    end else begin
        C_XR0C2_out_write = ap_const_logic_0;
    end
end

/// C_XR1C0_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_XR1C0_out_write = ap_const_logic_1;
    end else begin
        C_XR1C0_out_write = ap_const_logic_0;
    end
end

/// C_XR1C1_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_XR1C1_out_write = ap_const_logic_1;
    end else begin
        C_XR1C1_out_write = ap_const_logic_0;
    end
end

/// C_XR1C2_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_XR1C2_out_write = ap_const_logic_1;
    end else begin
        C_XR1C2_out_write = ap_const_logic_0;
    end
end

/// C_XR2C0_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_XR2C0_out_write = ap_const_logic_1;
    end else begin
        C_XR2C0_out_write = ap_const_logic_0;
    end
end

/// C_XR2C1_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_XR2C1_out_write = ap_const_logic_1;
    end else begin
        C_XR2C1_out_write = ap_const_logic_0;
    end
end

/// C_XR2C2_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_XR2C2_out_write = ap_const_logic_1;
    end else begin
        C_XR2C2_out_write = ap_const_logic_0;
    end
end

/// C_YR0C0_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_YR0C0_out_write = ap_const_logic_1;
    end else begin
        C_YR0C0_out_write = ap_const_logic_0;
    end
end

/// C_YR0C1_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_YR0C1_out_write = ap_const_logic_1;
    end else begin
        C_YR0C1_out_write = ap_const_logic_0;
    end
end

/// C_YR0C2_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_YR0C2_out_write = ap_const_logic_1;
    end else begin
        C_YR0C2_out_write = ap_const_logic_0;
    end
end

/// C_YR1C0_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_YR1C0_out_write = ap_const_logic_1;
    end else begin
        C_YR1C0_out_write = ap_const_logic_0;
    end
end

/// C_YR1C1_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_YR1C1_out_write = ap_const_logic_1;
    end else begin
        C_YR1C1_out_write = ap_const_logic_0;
    end
end

/// C_YR1C2_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_YR1C2_out_write = ap_const_logic_1;
    end else begin
        C_YR1C2_out_write = ap_const_logic_0;
    end
end

/// C_YR2C0_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_YR2C0_out_write = ap_const_logic_1;
    end else begin
        C_YR2C0_out_write = ap_const_logic_0;
    end
end

/// C_YR2C1_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        C_YR2C1_out_write = ap_const_logic_1;
    end else begin
        C_YR2C1_out_write = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return_0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223 or img_0_rows_V_fu_492_p1 or ap_return_0_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        ap_return_0 = img_0_rows_V_fu_492_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

/// ap_return_1 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223 or img_0_cols_V_fu_498_p1 or ap_return_1_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        ap_return_1 = img_0_cols_V_fu_498_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

/// ap_return_2 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223 or img_0_rows_V_fu_492_p1 or ap_return_2_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        ap_return_2 = img_0_rows_V_fu_492_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

/// ap_return_3 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223 or img_0_cols_V_fu_498_p1 or ap_return_3_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        ap_return_3 = img_0_cols_V_fu_498_p1;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_20)
begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// c_high_thresh_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        c_high_thresh_out_write = ap_const_logic_1;
    end else begin
        c_high_thresh_out_write = ap_const_logic_0;
    end
end

/// c_invert_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        c_invert_out_write = ap_const_logic_1;
    end else begin
        c_invert_out_write = ap_const_logic_0;
    end
end

/// c_low_thresh_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        c_low_thresh_out_write = ap_const_logic_1;
    end else begin
        c_low_thresh_out_write = ap_const_logic_0;
    end
end

/// img_0_cols_V_out2_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        img_0_cols_V_out2_write = ap_const_logic_1;
    end else begin
        img_0_cols_V_out2_write = ap_const_logic_0;
    end
end

/// img_0_cols_V_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        img_0_cols_V_out_write = ap_const_logic_1;
    end else begin
        img_0_cols_V_out_write = ap_const_logic_0;
    end
end

/// img_0_rows_V_out1_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        img_0_rows_V_out1_write = ap_const_logic_1;
    end else begin
        img_0_rows_V_out1_write = ap_const_logic_0;
    end
end

/// img_0_rows_V_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        img_0_rows_V_out_write = ap_const_logic_1;
    end else begin
        img_0_rows_V_out_write = ap_const_logic_0;
    end
end

/// p_out1_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        p_out1_write = ap_const_logic_1;
    end else begin
        p_out1_write = ap_const_logic_0;
    end
end

/// p_out2_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        p_out2_write = ap_const_logic_1;
    end else begin
        p_out2_write = ap_const_logic_0;
    end
end

/// p_out_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_223)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_223)) begin
        p_out_write = ap_const_logic_1;
    end else begin
        p_out_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_223)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_XR0C0_out_din = C_XR0C0;
assign C_XR0C1_out_din = C_XR0C1;
assign C_XR0C2_out_din = C_XR0C2;
assign C_XR1C0_out_din = C_XR1C0;
assign C_XR1C1_out_din = C_XR1C1;
assign C_XR1C2_out_din = C_XR1C2;
assign C_XR2C0_out_din = C_XR2C0;
assign C_XR2C1_out_din = C_XR2C1;
assign C_XR2C2_out_din = C_XR2C2;
assign C_YR0C0_out_din = C_YR0C0;
assign C_YR0C1_out_din = C_YR0C1;
assign C_YR0C2_out_din = C_YR0C2;
assign C_YR1C0_out_din = C_YR1C0;
assign C_YR1C1_out_din = C_YR1C1;
assign C_YR1C2_out_din = C_YR1C2;
assign C_YR2C0_out_din = C_YR2C0;
assign C_YR2C1_out_din = C_YR2C1;

/// ap_sig_bdd_20 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_223 assign process. ///
always @ (ap_start or ap_done_reg or img_0_rows_V_out_full_n or img_0_rows_V_out1_full_n or img_0_cols_V_out_full_n or img_0_cols_V_out2_full_n or C_XR2C0_out_full_n or C_YR0C0_out_full_n or C_YR0C2_out_full_n or C_YR1C0_out_full_n or C_YR1C2_out_full_n or C_YR2C0_out_full_n or C_YR2C1_out_full_n or c_high_thresh_out_full_n or C_YR1C1_out_full_n or C_XR1C2_out_full_n or C_YR0C1_out_full_n or C_XR2C2_out_full_n or C_XR0C0_out_full_n or C_XR0C1_out_full_n or C_XR0C2_out_full_n or C_XR1C0_out_full_n or C_XR2C1_out_full_n or C_XR1C1_out_full_n or c_low_thresh_out_full_n or c_invert_out_full_n or p_out_full_n or p_out1_full_n or p_out2_full_n)
begin
    ap_sig_bdd_223 = ((C_XR2C0_out_full_n == ap_const_logic_0) | (C_YR0C0_out_full_n == ap_const_logic_0) | (C_YR0C2_out_full_n == ap_const_logic_0) | (C_YR1C0_out_full_n == ap_const_logic_0) | (C_YR1C2_out_full_n == ap_const_logic_0) | (C_YR2C0_out_full_n == ap_const_logic_0) | (C_YR2C1_out_full_n == ap_const_logic_0) | (c_high_thresh_out_full_n == ap_const_logic_0) | (C_YR1C1_out_full_n == ap_const_logic_0) | (C_XR1C2_out_full_n == ap_const_logic_0) | (C_YR0C1_out_full_n == ap_const_logic_0) | (C_XR2C2_out_full_n == ap_const_logic_0) | (C_XR0C0_out_full_n == ap_const_logic_0) | (C_XR0C1_out_full_n == ap_const_logic_0) | (C_XR0C2_out_full_n == ap_const_logic_0) | (C_XR1C0_out_full_n == ap_const_logic_0) | (C_XR2C1_out_full_n == ap_const_logic_0) | (C_XR1C1_out_full_n == ap_const_logic_0) | (c_low_thresh_out_full_n == ap_const_logic_0) | (c_invert_out_full_n == ap_const_logic_0) | (p_out_full_n == ap_const_logic_0) | (p_out1_full_n == ap_const_logic_0) | (p_out2_full_n == ap_const_logic_0) | (img_0_rows_V_out_full_n == ap_const_logic_0) | (img_0_rows_V_out1_full_n == ap_const_logic_0) | (img_0_cols_V_out_full_n == ap_const_logic_0) | (img_0_cols_V_out2_full_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign c_high_thresh_out_din = c_high_thresh;
assign c_invert_out_din = c_invert;
assign c_low_thresh_out_din = c_low_thresh;
assign img_0_cols_V_fu_498_p1 = cols[11:0];
assign img_0_cols_V_out2_din = img_0_cols_V_fu_498_p1;
assign img_0_cols_V_out_din = img_0_cols_V_fu_498_p1;
assign img_0_rows_V_fu_492_p1 = rows[11:0];
assign img_0_rows_V_out1_din = img_0_rows_V_fu_492_p1;
assign img_0_rows_V_out_din = img_0_rows_V_fu_492_p1;
assign p_out1_din = empty_4;
assign p_out2_din = empty;
assign p_out_din = empty_3;


endmodule //sobel_Block_Mat_exit49_proc88

