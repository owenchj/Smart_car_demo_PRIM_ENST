-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_sobel_filter_core is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    cols_empty_n : IN STD_LOGIC;
    cols_read : OUT STD_LOGIC;
    C_XR0C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_XR0C0_empty_n : IN STD_LOGIC;
    C_XR0C0_read : OUT STD_LOGIC;
    C_XR0C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_XR0C1_empty_n : IN STD_LOGIC;
    C_XR0C1_read : OUT STD_LOGIC;
    C_XR0C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_XR0C2_empty_n : IN STD_LOGIC;
    C_XR0C2_read : OUT STD_LOGIC;
    C_XR1C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_XR1C0_empty_n : IN STD_LOGIC;
    C_XR1C0_read : OUT STD_LOGIC;
    C_XR1C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_XR1C1_empty_n : IN STD_LOGIC;
    C_XR1C1_read : OUT STD_LOGIC;
    C_XR1C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_XR1C2_empty_n : IN STD_LOGIC;
    C_XR1C2_read : OUT STD_LOGIC;
    C_XR2C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_XR2C0_empty_n : IN STD_LOGIC;
    C_XR2C0_read : OUT STD_LOGIC;
    C_XR2C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_XR2C1_empty_n : IN STD_LOGIC;
    C_XR2C1_read : OUT STD_LOGIC;
    C_XR2C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_XR2C2_empty_n : IN STD_LOGIC;
    C_XR2C2_read : OUT STD_LOGIC;
    C_YR0C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_YR0C0_empty_n : IN STD_LOGIC;
    C_YR0C0_read : OUT STD_LOGIC;
    C_YR0C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_YR0C1_empty_n : IN STD_LOGIC;
    C_YR0C1_read : OUT STD_LOGIC;
    C_YR0C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_YR0C2_empty_n : IN STD_LOGIC;
    C_YR0C2_read : OUT STD_LOGIC;
    C_YR1C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_YR1C0_empty_n : IN STD_LOGIC;
    C_YR1C0_read : OUT STD_LOGIC;
    C_YR1C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_YR1C1_empty_n : IN STD_LOGIC;
    C_YR1C1_read : OUT STD_LOGIC;
    C_YR1C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_YR1C2_empty_n : IN STD_LOGIC;
    C_YR1C2_read : OUT STD_LOGIC;
    C_YR2C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_YR2C0_empty_n : IN STD_LOGIC;
    C_YR2C0_read : OUT STD_LOGIC;
    C_YR2C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_YR2C1_empty_n : IN STD_LOGIC;
    C_YR2C1_read : OUT STD_LOGIC;
    c_high_thresh_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_high_thresh_empty_n : IN STD_LOGIC;
    c_high_thresh_read : OUT STD_LOGIC;
    c_low_thresh_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_low_thresh_empty_n : IN STD_LOGIC;
    c_low_thresh_read : OUT STD_LOGIC;
    c_invert_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    c_invert_empty_n : IN STD_LOGIC;
    c_invert_read : OUT STD_LOGIC );
end;


architecture behav of sobel_sobel_filter_core is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st8_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal col_assign_reg_438 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_col_assign_reg_438_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal exitcond_reg_1600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1600_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_1632 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_165 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal or_cond3_i_reg_1641 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_177 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal c_high_thresh_read_reg_1441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_233 : BOOLEAN;
    signal c_low_thresh_read_reg_1446 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_cast_i_cast_fu_450_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rows_cast_i_cast_reg_1451 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_i_cast_fu_460_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_i_cast_reg_1456 : STD_LOGIC_VECTOR (10 downto 0);
    signal cols_cast_i_cast_fu_464_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal cols_cast_i_cast_reg_1461 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_i_cast_fu_474_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_i_cast_reg_1466 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_478_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_1471 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_58_fu_484_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_58_reg_1476 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_36_0_i_i_fu_558_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_0_i_i_reg_1481 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_0_i_i_fu_562_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_0_i_i_reg_1486 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_0_1_i_i_fu_566_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_0_1_i_i_reg_1491 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_0_1_i_i_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_0_1_i_i_reg_1496 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_0_2_i_i_fu_574_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_0_2_i_i_reg_1501 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_0_2_i_i_fu_578_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_0_2_i_i_reg_1506 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_i_i_fu_582_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_i_i_reg_1511 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_1_i_i_fu_586_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_1_i_i_reg_1516 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_1_i_i_fu_590_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_1_i_i_reg_1521 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_1_1_i_i_fu_594_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_1_1_i_i_reg_1526 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_2_i_i_fu_598_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_1_2_i_i_reg_1531 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_1_2_i_i_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_1_2_i_i_reg_1536 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_2_i_i_fu_606_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_2_i_i_reg_1541 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_2_i_i_fu_610_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_2_i_i_reg_1546 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_2_1_i_i_fu_614_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_2_1_i_i_reg_1551 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_2_1_i_i_fu_618_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_2_1_i_i_reg_1556 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_2_2_i_i_fu_622_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_2_2_i_i_reg_1561 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_i_i_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_i_reg_1566 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_293 : BOOLEAN;
    signal row_fu_641_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_reg_1575 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_i_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_reg_1580 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1585 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_i_reg_1590 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_i_reg_1595 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_1600_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_688_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_reg_1604 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_i_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_reg_1609 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_32_i_reg_1609_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_32_i_reg_1609_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_i_reg_1616 : STD_LOGIC_VECTOR (63 downto 0);
    signal buff_A_val_1_addr_reg_1621 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_cond_i_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_i_reg_1636 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_i_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_C_val_1_0_1_load_reg_1645 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_2_i_i_fu_1220_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_2_i_i_reg_1655 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_val_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_0_ce0 : STD_LOGIC;
    signal buff_A_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_val_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_0_ce1 : STD_LOGIC;
    signal buff_A_val_0_we1 : STD_LOGIC;
    signal buff_A_val_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_val_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_1_ce0 : STD_LOGIC;
    signal buff_A_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_val_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_1_ce1 : STD_LOGIC;
    signal buff_A_val_1_we1 : STD_LOGIC;
    signal buff_A_val_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_val_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_2_ce0 : STD_LOGIC;
    signal buff_A_val_2_we0 : STD_LOGIC;
    signal buff_A_val_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_val_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_2_ce1 : STD_LOGIC;
    signal buff_A_val_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_i_reg_427 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_407 : BOOLEAN;
    signal col_assign_phi_fu_442_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_i_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_i_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buff_C_val_1_0_1_fu_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_84_fu_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_0_0_i_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_0_0_fu_1022_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_0_1_i_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_fu_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_1_0_i_fu_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_1_0_fu_1016_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_1_1_i_fu_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_2_1_i_fu_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_2_0_i_fu_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_2_0_fu_1009_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_i_fu_454_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_i_fu_468_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_86_fu_490_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_87_fu_494_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_fu_530_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_fu_498_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_97_fu_534_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_89_fu_502_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_fu_506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_99_fu_542_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_510_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_fu_546_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_514_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_101_fu_550_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_93_fu_518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_554_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_fu_522_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_fu_652_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_cast_cast_i_fu_632_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_107_fu_710_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_assign_cast_cast_i_fu_679_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp2_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_i_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_i_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl1_i_i_fu_763_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_i_i_fu_775_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i_i_fu_791_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_i_cast_i_cast_fu_783_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_807_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_i_cast_i_fu_771_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_cast_fu_813_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_i_i_fu_817_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_i_cast_i_fu_823_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_i_cast_i_fu_799_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1331_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_827_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_cast_fu_833_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_i_fu_836_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_i_fu_842_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_i36_i_fu_914_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_i37_i_fu_926_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i40_i_fu_942_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_i37_cast_i_cast_fu_934_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_fu_958_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_cast_fu_964_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_i36_cast_i_fu_922_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_i44_i_fu_968_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_i40_cast_i_fu_950_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_i44_cast_i_fu_974_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1322_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp7_cast_fu_984_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_978_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i46_i_fu_987_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i48_i_fu_993_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_fu_1003_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_0_1_i_i_fu_1037_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_0_1_i_i_fu_1033_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_0_1_i_i_fu_1037_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_0_1_i_i_fu_1042_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_0_1_i_i_fu_1042_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_1_2_i_i_fu_1063_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_1_2_i_i_fu_1059_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_1_2_i_i_fu_1063_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_1_2_i_i_fu_1068_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_1_2_i_i_fu_1068_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_2_i_i_fu_1077_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_2_i_i_fu_1073_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_2_i_i_fu_1077_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_2_i_i_fu_1082_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_2_i_i_fu_1082_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_2_2_i_i_fu_1095_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_2_2_i_i_fu_1095_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1306_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1363_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1291_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1340_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp25_fu_1104_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp25_fu_1104_p2 : signal is "no";
    signal tmp22_fu_1100_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp22_fu_1100_p2 : signal is "no";
    signal grp_fu_1371_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1283_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1348_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1314_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp32_fu_1118_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp32_fu_1118_p2 : signal is "no";
    signal tmp29_fu_1114_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp29_fu_1114_p2 : signal is "no";
    signal x_weight_2_2_2_i_i_fu_1108_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_i_i_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_i_i_fu_1134_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_weight_2_2_2_i_i_fu_1122_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_i_i_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_i_i_fu_1154_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_i_i_fu_1140_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_i_i_fu_1160_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal edge_weight_fu_1168_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_108_fu_1180_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_i_i_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_val_fu_1184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val1_i_i_fu_1190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_i_i_fu_1198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_i_i_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_i_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_edge_val_i_i_fu_1212_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_1_fu_1264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal edge_val_2_fu_1269_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1283_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_2_1_i_i_fu_1087_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1291_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_1_i_i_fu_1051_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1291_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1291_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1298_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1298_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_0_2_i_i_fu_1047_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1298_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_2_2_i_i_fu_1095_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1306_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_1_1_i_i_fu_1055_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1314_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_0_i_i_fu_1029_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1314_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1322_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1331_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1331_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1340_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1340_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1340_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1348_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1348_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1348_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1363_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1371_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1371_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1322_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1322_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1331_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1331_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_2_2_i_i_fu_1095_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component sobel_mac_muladd_8ns_8s_16s_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sobel_mac_muladd_6ns_8ns_8ns_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component sobel_mac_muladd_8ns_6ns_8ns_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component sobel_Filter2D_k_buf_0_val_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_sobel_filter_core_buff_A_val_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buff_A_val_0_U : component sobel_Filter2D_k_buf_0_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_A_val_0_address0,
        ce0 => buff_A_val_0_ce0,
        q0 => buff_A_val_0_q0,
        address1 => buff_A_val_0_address1,
        ce1 => buff_A_val_0_ce1,
        we1 => buff_A_val_0_we1,
        d1 => buff_A_val_0_d1);

    buff_A_val_1_U : component sobel_Filter2D_k_buf_0_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_A_val_1_address0,
        ce0 => buff_A_val_1_ce0,
        q0 => buff_A_val_1_q0,
        address1 => buff_A_val_1_address1,
        ce1 => buff_A_val_1_ce1,
        we1 => buff_A_val_1_we1,
        d1 => buff_A_val_1_d1);

    buff_A_val_2_U : component sobel_sobel_filter_core_buff_A_val_2
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_A_val_2_address0,
        ce0 => buff_A_val_2_ce0,
        we0 => buff_A_val_2_we0,
        d0 => buff_A_val_2_d0,
        address1 => buff_A_val_2_address1,
        ce1 => buff_A_val_2_ce1,
        q1 => buff_A_val_2_q1);

    sobel_mac_muladd_8ns_8s_16s_16_1_U108 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1283_p0,
        din1 => grp_fu_1283_p1,
        din2 => grp_fu_1283_p2,
        dout => grp_fu_1283_p3);

    sobel_mac_muladd_8ns_8s_16s_16_1_U109 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1291_p0,
        din1 => grp_fu_1291_p1,
        din2 => grp_fu_1291_p2,
        dout => grp_fu_1291_p3);

    sobel_mac_muladd_8ns_8s_16s_16_1_U110 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1298_p0,
        din1 => grp_fu_1298_p1,
        din2 => grp_fu_1298_p2,
        dout => grp_fu_1298_p3);

    sobel_mac_muladd_8ns_8s_16s_16_1_U111 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1306_p0,
        din1 => grp_fu_1306_p1,
        din2 => grp_fu_1306_p2,
        dout => grp_fu_1306_p3);

    sobel_mac_muladd_8ns_8s_16s_16_1_U112 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1314_p0,
        din1 => grp_fu_1314_p1,
        din2 => grp_fu_1314_p2,
        dout => grp_fu_1314_p3);

    sobel_mac_muladd_6ns_8ns_8ns_13_1_U113 : component sobel_mac_muladd_6ns_8ns_8ns_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_1322_p0,
        din1 => grp_fu_1322_p1,
        din2 => grp_fu_1322_p2,
        dout => grp_fu_1322_p3);

    sobel_mac_muladd_8ns_6ns_8ns_13_1_U114 : component sobel_mac_muladd_8ns_6ns_8ns_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_1331_p0,
        din1 => grp_fu_1331_p1,
        din2 => grp_fu_1331_p2,
        dout => grp_fu_1331_p3);

    sobel_mac_muladd_8ns_8s_16s_16_1_U115 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1340_p0,
        din1 => grp_fu_1340_p1,
        din2 => grp_fu_1340_p2,
        dout => grp_fu_1340_p3);

    sobel_mac_muladd_8ns_8s_16s_16_1_U116 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1348_p0,
        din1 => grp_fu_1348_p1,
        din2 => grp_fu_1348_p2,
        dout => grp_fu_1348_p3);

    sobel_mac_muladd_8ns_8s_16s_16_1_U117 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1355_p0,
        din1 => grp_fu_1355_p1,
        din2 => grp_fu_1355_p2,
        dout => grp_fu_1355_p3);

    sobel_mac_muladd_8ns_8s_16s_16_1_U118 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1363_p0,
        din1 => grp_fu_1363_p1,
        din2 => grp_fu_1363_p2,
        dout => grp_fu_1363_p3);

    sobel_mac_muladd_8ns_8s_16s_16_1_U119 : component sobel_mac_muladd_8ns_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1371_p0,
        din1 => grp_fu_1371_p1,
        din2 => grp_fu_1371_p2,
        dout => grp_fu_1371_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_636_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((ap_const_lv1_0 = exitcond_fu_683_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_636_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_636_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_636_p2))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_636_p2)) or (not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- col_assign_reg_438 assign process. --
    col_assign_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (exitcond_reg_1600 = ap_const_lv1_0))) then 
                col_assign_reg_438 <= col_reg_1604;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_636_p2))) then 
                col_assign_reg_438 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- row_i_reg_427 assign process. --
    row_i_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_3)) then 
                row_i_reg_427 <= row_reg_1575;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
                row_i_reg_427 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then
                ap_reg_ppstg_col_assign_reg_438_pp0_it1 <= col_assign_reg_438;
                ap_reg_ppstg_exitcond_reg_1600_pp0_it1 <= exitcond_reg_1600;
                ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it1 <= or_cond3_i_reg_1641;
                ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it1 <= or_cond4_i_reg_1636;
                ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1 <= or_cond_i_reg_1632;
                ap_reg_ppstg_tmp_32_i_reg_1609_pp0_it1 <= tmp_32_i_reg_1609;
                exitcond_reg_1600 <= exitcond_fu_683_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))))) then
                ap_reg_ppstg_exitcond_reg_1600_pp0_it2 <= ap_reg_ppstg_exitcond_reg_1600_pp0_it1;
                ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it2 <= ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it1;
                ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it3 <= ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it2;
                ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it2 <= ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it1;
                ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it3 <= ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it2;
                ap_reg_ppstg_tmp_32_i_reg_1609_pp0_it2 <= ap_reg_ppstg_tmp_32_i_reg_1609_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (ap_const_lv1_0 = exitcond_fu_683_p2) and not((ap_const_lv1_0 = tmp_32_i_fu_694_p2)))) then
                buff_A_val_1_addr_reg_1621 <= tmp_33_i_fu_699_p1(10 - 1 downto 0);
                    tmp_33_i_reg_1616(10 downto 0) <= tmp_33_i_fu_699_p1(10 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1600_pp0_it2))) then
                buff_C_val_0_0_i_fu_172 <= buff_C_val_0_0_fu_1022_p3;
                buff_C_val_0_1_i_fu_176 <= buff_C_val_0_0_i_fu_172;
                buff_C_val_1_0_i_fu_184 <= buff_C_val_1_0_fu_1016_p3;
                buff_C_val_1_1_i_fu_188 <= buff_C_val_1_0_i_fu_184;
                buff_C_val_2_0_i_fu_196 <= buff_C_val_2_0_fu_1009_p3;
                buff_C_val_2_1_i_fu_192 <= buff_C_val_2_0_i_fu_196;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (exitcond_reg_1600 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_32_i_reg_1609)))) then
                buff_C_val_1_0_1_fu_160 <= buff_A_val_0_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_reg_1600_pp0_it1 = ap_const_lv1_0) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_32_i_reg_1609_pp0_it1)))) then
                buff_C_val_1_0_1_load_reg_1645 <= buff_C_val_1_0_1_fu_160;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then
                c_high_thresh_read_reg_1441 <= c_high_thresh_dout;
                c_low_thresh_read_reg_1446 <= c_low_thresh_dout;
                    cols_cast_i_cast_reg_1461(9 downto 0) <= cols_cast_i_cast_fu_464_p1(9 downto 0);
                    rows_cast_i_cast_reg_1451(8 downto 0) <= rows_cast_i_cast_fu_450_p1(8 downto 0);
                tmp_24_i_cast_reg_1456 <= tmp_24_i_cast_fu_460_p1;
                tmp_25_i_cast_reg_1466 <= tmp_25_i_cast_fu_474_p1;
                tmp_29_i_i_reg_1566 <= tmp_29_i_i_fu_626_p2;
                tmp_36_0_1_i_i_reg_1491 <= tmp_36_0_1_i_i_fu_566_p1;
                tmp_36_0_2_i_i_reg_1501 <= tmp_36_0_2_i_i_fu_574_p1;
                tmp_36_0_i_i_reg_1481 <= tmp_36_0_i_i_fu_558_p1;
                tmp_36_1_1_i_i_reg_1521 <= tmp_36_1_1_i_i_fu_590_p1;
                tmp_36_1_2_i_i_reg_1531 <= tmp_36_1_2_i_i_fu_598_p1;
                tmp_36_1_i_i_reg_1511 <= tmp_36_1_i_i_fu_582_p1;
                tmp_36_2_1_i_i_reg_1551 <= tmp_36_2_1_i_i_fu_614_p1;
                tmp_36_2_2_i_i_reg_1561 <= tmp_36_2_2_i_i_fu_622_p1;
                tmp_36_2_i_i_reg_1541 <= tmp_36_2_i_i_fu_606_p1;
                tmp_38_0_1_i_i_reg_1496 <= tmp_38_0_1_i_i_fu_570_p1;
                tmp_38_0_2_i_i_reg_1506 <= tmp_38_0_2_i_i_fu_578_p1;
                tmp_38_0_i_i_reg_1486 <= tmp_38_0_i_i_fu_562_p1;
                tmp_38_1_1_i_i_reg_1526 <= tmp_38_1_1_i_i_fu_594_p1;
                tmp_38_1_2_i_i_reg_1536 <= tmp_38_1_2_i_i_fu_602_p1;
                tmp_38_1_i_i_reg_1516 <= tmp_38_1_i_i_fu_586_p1;
                tmp_38_2_1_i_i_reg_1556 <= tmp_38_2_1_i_i_fu_618_p1;
                tmp_38_2_i_i_reg_1546 <= tmp_38_2_i_i_fu_610_p1;
                tmp_58_reg_1476 <= tmp_58_fu_484_p2;
                tmp_s_reg_1471 <= tmp_s_fu_478_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then
                col_reg_1604 <= col_fu_688_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_1600_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it2))) then
                edge_val_2_i_i_reg_1655 <= edge_val_2_i_i_fu_1220_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_636_p2))) then
                icmp_reg_1585 <= icmp_fu_662_p2;
                tmp_27_i_reg_1580 <= tmp_27_i_fu_647_p2;
                tmp_29_i_reg_1590 <= tmp_29_i_fu_668_p2;
                tmp_30_i_reg_1595 <= tmp_30_i_fu_674_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (ap_const_lv1_0 = exitcond_fu_683_p2))) then
                or_cond3_i_reg_1641 <= or_cond3_i_fu_753_p2;
                or_cond4_i_reg_1636 <= or_cond4_i_fu_741_p2;
                or_cond_i_reg_1632 <= or_cond_i_fu_705_p2;
                tmp_32_i_reg_1609 <= tmp_32_i_fu_694_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                row_reg_1575 <= row_fu_641_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_reg_1600_pp0_it1 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then
                tmp_84_fu_168 <= src_data_stream_1_V_dout;
                tmp_85_fu_180 <= src_data_stream_0_V_dout;
                tmp_fu_164 <= src_data_stream_2_V_dout;
            end if;
        end if;
    end process;
    rows_cast_i_cast_reg_1451(9) <= '0';
    cols_cast_i_cast_reg_1461(10) <= '0';
    tmp_33_i_reg_1616(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4, ap_sig_bdd_233, exitcond1_fu_636_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_233)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_636_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st8_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- C_XR0C0_read assign process. --
    C_XR0C0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_XR0C0_read <= ap_const_logic_1;
        else 
            C_XR0C0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_XR0C1_read assign process. --
    C_XR0C1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_XR0C1_read <= ap_const_logic_1;
        else 
            C_XR0C1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_XR0C2_read assign process. --
    C_XR0C2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_XR0C2_read <= ap_const_logic_1;
        else 
            C_XR0C2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_XR1C0_read assign process. --
    C_XR1C0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_XR1C0_read <= ap_const_logic_1;
        else 
            C_XR1C0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_XR1C1_read assign process. --
    C_XR1C1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_XR1C1_read <= ap_const_logic_1;
        else 
            C_XR1C1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_XR1C2_read assign process. --
    C_XR1C2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_XR1C2_read <= ap_const_logic_1;
        else 
            C_XR1C2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_XR2C0_read assign process. --
    C_XR2C0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_XR2C0_read <= ap_const_logic_1;
        else 
            C_XR2C0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_XR2C1_read assign process. --
    C_XR2C1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_XR2C1_read <= ap_const_logic_1;
        else 
            C_XR2C1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_XR2C2_read assign process. --
    C_XR2C2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_XR2C2_read <= ap_const_logic_1;
        else 
            C_XR2C2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_YR0C0_read assign process. --
    C_YR0C0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_YR0C0_read <= ap_const_logic_1;
        else 
            C_YR0C0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_YR0C1_read assign process. --
    C_YR0C1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_YR0C1_read <= ap_const_logic_1;
        else 
            C_YR0C1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_YR0C2_read assign process. --
    C_YR0C2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_YR0C2_read <= ap_const_logic_1;
        else 
            C_YR0C2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_YR1C0_read assign process. --
    C_YR1C0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_YR1C0_read <= ap_const_logic_1;
        else 
            C_YR1C0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_YR1C1_read assign process. --
    C_YR1C1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_YR1C1_read <= ap_const_logic_1;
        else 
            C_YR1C1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_YR1C2_read assign process. --
    C_YR1C2_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_YR1C2_read <= ap_const_logic_1;
        else 
            C_YR1C2_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_YR2C0_read assign process. --
    C_YR2C0_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_YR2C0_read <= ap_const_logic_1;
        else 
            C_YR2C0_read <= ap_const_logic_0;
        end if; 
    end process;


    -- C_YR2C1_read assign process. --
    C_YR2C1_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            C_YR2C1_read <= ap_const_logic_1;
        else 
            C_YR2C1_read <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_636_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_636_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond1_fu_636_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_636_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, ap_reg_ppstg_exitcond_reg_1600_pp0_it1, ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1)
    begin
                ap_sig_bdd_165 <= (((src_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond_reg_1600_pp0_it1 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1))) or ((ap_reg_ppstg_exitcond_reg_1600_pp0_it1 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1)) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((ap_reg_ppstg_exitcond_reg_1600_pp0_it1 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1)) and (src_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_177 assign process. --
    ap_sig_bdd_177_assign_proc : process(dst_data_stream_V_full_n, ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it3)
    begin
                ap_sig_bdd_177 <= ((dst_data_stream_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it3)));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_empty_n, C_XR0C0_empty_n, C_XR0C1_empty_n, C_XR0C2_empty_n, C_XR1C0_empty_n, C_XR1C1_empty_n, C_XR1C2_empty_n, C_XR2C0_empty_n, C_XR2C1_empty_n, C_XR2C2_empty_n, C_YR0C0_empty_n, C_YR0C1_empty_n, C_YR0C2_empty_n, C_YR1C0_empty_n, C_YR1C1_empty_n, C_YR1C2_empty_n, C_YR2C0_empty_n, C_YR2C1_empty_n, c_high_thresh_empty_n, c_low_thresh_empty_n, c_invert_empty_n)
    begin
                ap_sig_bdd_233 <= ((rows_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (C_XR0C0_empty_n = ap_const_logic_0) or (C_XR0C1_empty_n = ap_const_logic_0) or (C_XR0C2_empty_n = ap_const_logic_0) or (C_XR1C0_empty_n = ap_const_logic_0) or (C_XR1C1_empty_n = ap_const_logic_0) or (C_XR1C2_empty_n = ap_const_logic_0) or (C_XR2C0_empty_n = ap_const_logic_0) or (C_XR2C1_empty_n = ap_const_logic_0) or (C_XR2C2_empty_n = ap_const_logic_0) or (C_YR0C0_empty_n = ap_const_logic_0) or (C_YR0C1_empty_n = ap_const_logic_0) or (C_YR0C2_empty_n = ap_const_logic_0) or (C_YR1C0_empty_n = ap_const_logic_0) or (C_YR1C1_empty_n = ap_const_logic_0) or (C_YR1C2_empty_n = ap_const_logic_0) or (C_YR2C0_empty_n = ap_const_logic_0) or (C_YR2C1_empty_n = ap_const_logic_0) or (c_high_thresh_empty_n = ap_const_logic_0) or (c_low_thresh_empty_n = ap_const_logic_0) or (c_invert_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_293 assign process. --
    ap_sig_bdd_293_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_293 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_407 assign process. --
    ap_sig_bdd_407_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_407 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_293)
    begin
        if (ap_sig_bdd_293) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_3 assign process. --
    ap_sig_cseq_ST_st8_fsm_3_assign_proc : process(ap_sig_bdd_407)
    begin
        if (ap_sig_bdd_407) then 
            ap_sig_cseq_ST_st8_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_val_0_address0 <= tmp_33_i_fu_699_p1(10 - 1 downto 0);
    buff_A_val_0_address1 <= tmp_34_i_fu_859_p1(10 - 1 downto 0);

    -- buff_A_val_0_ce0 assign process. --
    buff_A_val_0_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            buff_A_val_0_ce0 <= ap_const_logic_1;
        else 
            buff_A_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_val_0_ce1 assign process. --
    buff_A_val_0_ce1_assign_proc : process(ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            buff_A_val_0_ce1 <= ap_const_logic_1;
        else 
            buff_A_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_val_0_d1 <= std_logic_vector(unsigned(tmp_i_i_fu_842_p4) + unsigned(ap_const_lv8_10));

    -- buff_A_val_0_we1 assign process. --
    buff_A_val_0_we1_assign_proc : process(ap_reg_ppstg_exitcond_reg_1600_pp0_it1, ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if ((((ap_reg_ppstg_exitcond_reg_1600_pp0_it1 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))))))) then 
            buff_A_val_0_we1 <= ap_const_logic_1;
        else 
            buff_A_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_val_1_address0 <= tmp_33_i_fu_699_p1(10 - 1 downto 0);
    buff_A_val_1_address1 <= buff_A_val_1_addr_reg_1621;

    -- buff_A_val_1_ce0 assign process. --
    buff_A_val_1_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            buff_A_val_1_ce0 <= ap_const_logic_1;
        else 
            buff_A_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_val_1_ce1 assign process. --
    buff_A_val_1_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            buff_A_val_1_ce1 <= ap_const_logic_1;
        else 
            buff_A_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_val_1_d1 <= buff_A_val_0_q0;

    -- buff_A_val_1_we1 assign process. --
    buff_A_val_1_we1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, exitcond_reg_1600, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4, tmp_32_i_reg_1609)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (exitcond_reg_1600 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_32_i_reg_1609))))) then 
            buff_A_val_1_we1 <= ap_const_logic_1;
        else 
            buff_A_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_val_2_address0 <= tmp_33_i_reg_1616(10 - 1 downto 0);
    buff_A_val_2_address1 <= tmp_35_i_fu_882_p1(10 - 1 downto 0);

    -- buff_A_val_2_ce0 assign process. --
    buff_A_val_2_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            buff_A_val_2_ce0 <= ap_const_logic_1;
        else 
            buff_A_val_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_val_2_ce1 assign process. --
    buff_A_val_2_ce1_assign_proc : process(ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            buff_A_val_2_ce1 <= ap_const_logic_1;
        else 
            buff_A_val_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_val_2_d0 <= buff_A_val_1_q0;

    -- buff_A_val_2_we0 assign process. --
    buff_A_val_2_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, exitcond_reg_1600, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4, tmp_32_i_reg_1609)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (exitcond_reg_1600 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_32_i_reg_1609))))) then 
            buff_A_val_2_we0 <= ap_const_logic_1;
        else 
            buff_A_val_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_C_val_0_0_fu_1022_p3 <= 
        y_2_fu_1003_p2 when (ap_reg_ppstg_tmp_32_i_reg_1609_pp0_it2(0) = '1') else 
        buff_C_val_0_0_i_fu_172;
    buff_C_val_1_0_fu_1016_p3 <= 
        buff_C_val_1_0_1_load_reg_1645 when (ap_reg_ppstg_tmp_32_i_reg_1609_pp0_it2(0) = '1') else 
        buff_C_val_1_0_i_fu_184;
    buff_C_val_2_0_fu_1009_p3 <= 
        buff_A_val_2_q1 when (ap_reg_ppstg_tmp_32_i_reg_1609_pp0_it2(0) = '1') else 
        buff_C_val_2_0_i_fu_196;

    -- c_high_thresh_read assign process. --
    c_high_thresh_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            c_high_thresh_read <= ap_const_logic_1;
        else 
            c_high_thresh_read <= ap_const_logic_0;
        end if; 
    end process;


    -- c_invert_read assign process. --
    c_invert_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            c_invert_read <= ap_const_logic_1;
        else 
            c_invert_read <= ap_const_logic_0;
        end if; 
    end process;


    -- c_low_thresh_read assign process. --
    c_low_thresh_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            c_low_thresh_read <= ap_const_logic_1;
        else 
            c_low_thresh_read <= ap_const_logic_0;
        end if; 
    end process;

    col_assign_cast_cast_i_fu_679_p1 <= std_logic_vector(resize(unsigned(col_assign_phi_fu_442_p4),12));

    -- col_assign_phi_fu_442_p4 assign process. --
    col_assign_phi_fu_442_p4_assign_proc : process(col_assign_reg_438, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, exitcond_reg_1600, col_reg_1604)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_1600 = ap_const_lv1_0))) then 
            col_assign_phi_fu_442_p4 <= col_reg_1604;
        else 
            col_assign_phi_fu_442_p4 <= col_assign_reg_438;
        end if; 
    end process;

    col_fu_688_p2 <= std_logic_vector(unsigned(col_assign_phi_fu_442_p4) + unsigned(ap_const_lv11_1));
    cols_cast_i_cast_fu_464_p1 <= std_logic_vector(resize(unsigned(cols_dout),11));

    -- cols_read assign process. --
    cols_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            cols_read <= ap_const_logic_1;
        else 
            cols_read <= ap_const_logic_0;
        end if; 
    end process;

    dst_data_stream_V_din <= 
        ap_const_lv8_0 when (ap_reg_ppstg_or_cond4_i_reg_1636_pp0_it3(0) = '1') else 
        edge_val_2_fu_1269_p3;

    -- dst_data_stream_V_write assign process. --
    dst_data_stream_V_write_assign_proc : process(ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it3, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if ((not((ap_const_lv1_0 = ap_reg_ppstg_or_cond3_i_reg_1641_pp0_it3)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    edge_val1_i_i_fu_1190_p3 <= 
        edge_val_fu_1184_p2 when (tmp_23_i_i_fu_1174_p2(0) = '1') else 
        ap_const_lv8_0;
    edge_val_1_fu_1264_p2 <= (edge_val_2_i_i_reg_1655 xor ap_const_lv8_FF);
    edge_val_2_fu_1269_p3 <= 
        edge_val_1_fu_1264_p2 when (tmp_29_i_i_reg_1566(0) = '1') else 
        edge_val_2_i_i_reg_1655;
    edge_val_2_i_i_fu_1220_p3 <= 
        p_edge_val_i_i_fu_1212_p3 when (tmp_27_i_i_fu_1202_p2(0) = '1') else 
        ap_const_lv8_FF;
    edge_val_fu_1184_p2 <= (tmp_108_fu_1180_p1 xor ap_const_lv8_FF);
    edge_weight_fu_1168_p2 <= std_logic_vector(unsigned(tmp_19_i_i_fu_1140_p3) + unsigned(tmp_22_i_i_fu_1160_p3));
    exitcond1_fu_636_p2 <= "1" when (row_i_reg_427 = tmp_58_reg_1476) else "0";
    exitcond_fu_683_p2 <= "1" when (col_assign_phi_fu_442_p4 = tmp_s_reg_1471) else "0";
    grp_fu_1283_p0 <= tmp_35_2_1_i_i_fu_1087_p1(8 - 1 downto 0);
    grp_fu_1283_p1 <= tmp_38_2_1_i_i_reg_1556(8 - 1 downto 0);
    grp_fu_1283_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_39_2_i_i_fu_1082_p0) * signed(tmp_39_2_i_i_fu_1082_p1))), 16));
    grp_fu_1291_p0 <= tmp_35_1_i_i_fu_1051_p1(8 - 1 downto 0);
    grp_fu_1291_p1 <= tmp_36_1_i_i_reg_1511(8 - 1 downto 0);
    grp_fu_1291_p2 <= grp_fu_1298_p3;
    grp_fu_1298_p0 <= tmp_35_0_2_i_i_fu_1047_p1(8 - 1 downto 0);
    grp_fu_1298_p1 <= tmp_36_0_2_i_i_reg_1501(8 - 1 downto 0);
    grp_fu_1298_p2 <= tmp_37_2_2_i_i_fu_1095_p2;
    grp_fu_1306_p0 <= tmp_35_1_1_i_i_fu_1055_p1(8 - 1 downto 0);
    grp_fu_1306_p1 <= tmp_36_1_1_i_i_reg_1521(8 - 1 downto 0);
    grp_fu_1306_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_37_1_2_i_i_fu_1063_p0) * signed(tmp_37_1_2_i_i_fu_1063_p1))), 16));
    grp_fu_1314_p0 <= tmp_35_0_i_i_fu_1029_p1(8 - 1 downto 0);
    grp_fu_1314_p1 <= tmp_38_0_i_i_reg_1486(8 - 1 downto 0);
    grp_fu_1314_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_39_0_1_i_i_fu_1042_p0) * signed(tmp_39_0_1_i_i_fu_1042_p1))), 16));
    grp_fu_1322_p0 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_1322_p1 <= grp_fu_1322_p10(8 - 1 downto 0);
    grp_fu_1322_p10 <= std_logic_vector(resize(unsigned(tmp_fu_164),13));
    grp_fu_1322_p2 <= grp_fu_1322_p20(8 - 1 downto 0);
    grp_fu_1322_p20 <= std_logic_vector(resize(unsigned(tmp_84_fu_168),13));
    grp_fu_1331_p0 <= grp_fu_1331_p00(8 - 1 downto 0);
    grp_fu_1331_p00 <= std_logic_vector(resize(unsigned(src_data_stream_2_V_dout),13));
    grp_fu_1331_p1 <= ap_const_lv13_19(6 - 1 downto 0);
    grp_fu_1331_p2 <= grp_fu_1331_p20(8 - 1 downto 0);
    grp_fu_1331_p20 <= std_logic_vector(resize(unsigned(src_data_stream_1_V_dout),13));
    grp_fu_1340_p0 <= tmp_35_0_i_i_fu_1029_p1(8 - 1 downto 0);
    grp_fu_1340_p1 <= tmp_36_0_i_i_reg_1481(8 - 1 downto 0);
    grp_fu_1340_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_37_0_1_i_i_fu_1037_p0) * signed(tmp_37_0_1_i_i_fu_1037_p1))), 16));
    grp_fu_1348_p0 <= tmp_35_1_i_i_fu_1051_p1(8 - 1 downto 0);
    grp_fu_1348_p1 <= tmp_38_1_i_i_reg_1516(8 - 1 downto 0);
    grp_fu_1348_p2 <= grp_fu_1355_p3;
    grp_fu_1355_p0 <= tmp_35_0_2_i_i_fu_1047_p1(8 - 1 downto 0);
    grp_fu_1355_p1 <= tmp_38_0_2_i_i_reg_1506(8 - 1 downto 0);
    grp_fu_1355_p2 <= tmp_37_2_2_i_i_fu_1095_p2;
    grp_fu_1363_p0 <= tmp_35_2_1_i_i_fu_1087_p1(8 - 1 downto 0);
    grp_fu_1363_p1 <= tmp_36_2_1_i_i_reg_1551(8 - 1 downto 0);
    grp_fu_1363_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_37_2_i_i_fu_1077_p0) * signed(tmp_37_2_i_i_fu_1077_p1))), 16));
    grp_fu_1371_p0 <= tmp_35_1_1_i_i_fu_1055_p1(8 - 1 downto 0);
    grp_fu_1371_p1 <= tmp_38_1_1_i_i_reg_1526(8 - 1 downto 0);
    grp_fu_1371_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_39_1_2_i_i_fu_1068_p0) * signed(tmp_39_1_2_i_i_fu_1068_p1))), 16));
    icmp2_fu_720_p2 <= "1" when (tmp_107_fu_710_p4 = ap_const_lv10_0) else "0";
    icmp_fu_662_p2 <= "1" when (tmp_103_fu_652_p4 = ap_const_lv9_0) else "0";
    or_cond3_i_fu_753_p2 <= (tmp_29_i_reg_1590 and tmp_38_i_fu_747_p2);
    or_cond4_i_fu_741_p2 <= (tmp9_fu_736_p2 or tmp8_fu_731_p2);
    or_cond_i_fu_705_p2 <= (tmp_32_i_fu_694_p2 and tmp_27_i_reg_1580);
    p_edge_val_i_i_fu_1212_p3 <= 
        ap_const_lv8_0 when (tmp_28_i_i_fu_1207_p2(0) = '1') else 
        edge_val1_i_i_fu_1190_p3;
    p_shl1_i36_cast_i_fu_922_p1 <= std_logic_vector(resize(unsigned(p_shl1_i36_i_fu_914_p3),15));
    p_shl1_i36_i_fu_914_p3 <= (tmp_85_fu_180 & ap_const_lv6_0);
    p_shl1_i_cast_i_fu_771_p1 <= std_logic_vector(resize(unsigned(p_shl1_i_i_fu_763_p3),15));
    p_shl1_i_i_fu_763_p3 <= (src_data_stream_0_V_dout & ap_const_lv6_0);
    p_shl2_i37_cast_i_cast_fu_934_p1 <= std_logic_vector(resize(unsigned(p_shl2_i37_i_fu_926_p3),10));
    p_shl2_i37_i_fu_926_p3 <= (tmp_85_fu_180 & ap_const_lv1_0);
    p_shl2_i_cast_i_cast_fu_783_p1 <= std_logic_vector(resize(unsigned(p_shl2_i_i_fu_775_p3),10));
    p_shl2_i_i_fu_775_p3 <= (src_data_stream_0_V_dout & ap_const_lv1_0);
    p_shl_i40_cast_i_fu_950_p1 <= std_logic_vector(resize(unsigned(p_shl_i40_i_fu_942_p3),16));
    p_shl_i40_i_fu_942_p3 <= (tmp_84_fu_168 & ap_const_lv7_0);
    p_shl_i_cast_i_fu_799_p1 <= std_logic_vector(resize(unsigned(p_shl_i_i_fu_791_p3),16));
    p_shl_i_i_fu_791_p3 <= (src_data_stream_1_V_dout & ap_const_lv7_0);
    row_cast_cast_i_fu_632_p1 <= std_logic_vector(resize(unsigned(row_i_reg_427),11));
    row_fu_641_p2 <= std_logic_vector(unsigned(row_i_reg_427) + unsigned(ap_const_lv10_1));
    rows_cast_i_cast_fu_450_p1 <= std_logic_vector(resize(unsigned(rows_dout),10));

    -- rows_read assign process. --
    rows_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_233)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_233))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;


    -- src_data_stream_0_V_read assign process. --
    src_data_stream_0_V_read_assign_proc : process(ap_reg_ppstg_exitcond_reg_1600_pp0_it1, ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_reg_ppstg_exitcond_reg_1600_pp0_it1 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- src_data_stream_1_V_read assign process. --
    src_data_stream_1_V_read_assign_proc : process(ap_reg_ppstg_exitcond_reg_1600_pp0_it1, ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_reg_ppstg_exitcond_reg_1600_pp0_it1 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- src_data_stream_2_V_read assign process. --
    src_data_stream_2_V_read_assign_proc : process(ap_reg_ppstg_exitcond_reg_1600_pp0_it1, ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1, ap_sig_bdd_165, ap_reg_ppiten_pp0_it2, ap_sig_bdd_177, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_reg_ppstg_exitcond_reg_1600_pp0_it1 = ap_const_lv1_0) and not((ap_const_lv1_0 = ap_reg_ppstg_or_cond_i_reg_1632_pp0_it1)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_165 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or (ap_sig_bdd_177 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp22_fu_1100_p2 <= std_logic_vector(signed(grp_fu_1306_p3) + signed(grp_fu_1363_p3));
    tmp25_fu_1104_p2 <= std_logic_vector(signed(grp_fu_1291_p3) + signed(grp_fu_1340_p3));
    tmp29_fu_1114_p2 <= std_logic_vector(signed(grp_fu_1371_p3) + signed(grp_fu_1283_p3));
    tmp2_cast_fu_813_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_807_p2),15));
    tmp2_fu_807_p2 <= std_logic_vector(unsigned(p_shl2_i_cast_i_cast_fu_783_p1) + unsigned(ap_const_lv10_80));
    tmp32_fu_1118_p2 <= std_logic_vector(signed(grp_fu_1348_p3) + signed(grp_fu_1314_p3));
    tmp3_fu_827_p2 <= std_logic_vector(unsigned(tmp_6_i_cast_i_fu_823_p1) + unsigned(p_shl_i_cast_i_fu_799_p1));
    tmp4_cast_fu_833_p1 <= std_logic_vector(resize(unsigned(grp_fu_1331_p3),16));
    tmp5_cast_fu_964_p1 <= std_logic_vector(resize(unsigned(tmp5_fu_958_p2),15));
    tmp5_fu_958_p2 <= std_logic_vector(unsigned(ap_const_lv10_80) + unsigned(p_shl2_i37_cast_i_cast_fu_934_p1));
    tmp6_fu_978_p2 <= std_logic_vector(unsigned(p_shl_i40_cast_i_fu_950_p1) + unsigned(tmp_6_i44_cast_i_fu_974_p1));
    tmp7_cast_fu_984_p1 <= std_logic_vector(resize(unsigned(grp_fu_1322_p3),16));
    tmp8_fu_731_p2 <= (icmp_reg_1585 or icmp2_fu_720_p2);
    tmp9_fu_736_p2 <= (tmp_30_i_reg_1595 or tmp_37_i_fu_726_p2);
    tmp_100_fu_546_p1 <= C_YR1C2_dout(8 - 1 downto 0);
    tmp_101_fu_550_p1 <= C_YR2C0_dout(8 - 1 downto 0);
    tmp_102_fu_554_p1 <= C_YR2C1_dout(8 - 1 downto 0);
    tmp_103_fu_652_p4 <= row_i_reg_427(9 downto 1);
    tmp_107_fu_710_p4 <= col_assign_phi_fu_442_p4(10 downto 1);
    tmp_108_fu_1180_p1 <= edge_weight_fu_1168_p2(8 - 1 downto 0);
    tmp_17_i_i_fu_1128_p2 <= "1" when (signed(x_weight_2_2_2_i_i_fu_1108_p2) > signed(ap_const_lv16_0)) else "0";
    tmp_18_i_i_fu_1134_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(x_weight_2_2_2_i_i_fu_1108_p2));
    tmp_19_i_i_fu_1140_p3 <= 
        x_weight_2_2_2_i_i_fu_1108_p2 when (tmp_17_i_i_fu_1128_p2(0) = '1') else 
        tmp_18_i_i_fu_1134_p2;
    tmp_20_i_i_fu_1148_p2 <= "1" when (signed(y_weight_2_2_2_i_i_fu_1122_p2) > signed(ap_const_lv16_0)) else "0";
    tmp_21_i_i_fu_1154_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(y_weight_2_2_2_i_i_fu_1122_p2));
    tmp_22_i_i_fu_1160_p3 <= 
        y_weight_2_2_2_i_i_fu_1122_p2 when (tmp_20_i_i_fu_1148_p2(0) = '1') else 
        tmp_21_i_i_fu_1154_p2;
    tmp_23_i_i_fu_1174_p2 <= "1" when (signed(edge_weight_fu_1168_p2) < signed(ap_const_lv16_FF)) else "0";
        tmp_24_i_cast_fu_460_p1 <= std_logic_vector(resize(signed(tmp_24_i_fu_454_p2),11));

    tmp_24_i_fu_454_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(rows_cast_i_cast_fu_450_p1));
        tmp_25_i_cast_fu_474_p1 <= std_logic_vector(resize(signed(tmp_25_i_fu_468_p2),12));

    tmp_25_i_fu_468_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(cols_cast_i_cast_fu_464_p1));
    tmp_26_i_i_fu_1198_p1 <= std_logic_vector(resize(unsigned(edge_val1_i_i_fu_1190_p3),32));
    tmp_27_i_fu_647_p2 <= "1" when (unsigned(row_i_reg_427) < unsigned(rows_cast_i_cast_reg_1451)) else "0";
    tmp_27_i_i_fu_1202_p2 <= "1" when (signed(tmp_26_i_i_fu_1198_p1) < signed(c_high_thresh_read_reg_1441)) else "0";
    tmp_28_i_i_fu_1207_p2 <= "1" when (signed(tmp_26_i_i_fu_1198_p1) < signed(c_low_thresh_read_reg_1446)) else "0";
    tmp_29_i_fu_668_p2 <= "0" when (row_i_reg_427 = ap_const_lv10_0) else "1";
    tmp_29_i_i_fu_626_p2 <= "1" when (c_invert_dout = ap_const_lv32_1) else "0";
    tmp_30_i_fu_674_p2 <= "1" when (signed(row_cast_cast_i_fu_632_p1) > signed(tmp_24_i_cast_reg_1456)) else "0";
    tmp_32_i_fu_694_p2 <= "1" when (unsigned(col_assign_phi_fu_442_p4) < unsigned(cols_cast_i_cast_reg_1461)) else "0";
    tmp_33_i_fu_699_p1 <= std_logic_vector(resize(unsigned(col_assign_phi_fu_442_p4),64));
    tmp_34_i_fu_859_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_col_assign_reg_438_pp0_it1),64));
    tmp_35_0_1_i_i_fu_1033_p1 <= std_logic_vector(resize(unsigned(buff_C_val_0_0_i_fu_172),16));
    tmp_35_0_2_i_i_fu_1047_p1 <= std_logic_vector(resize(unsigned(buff_C_val_0_1_i_fu_176),16));
    tmp_35_0_i_i_fu_1029_p1 <= std_logic_vector(resize(unsigned(buff_C_val_0_0_fu_1022_p3),16));
    tmp_35_1_1_i_i_fu_1055_p1 <= std_logic_vector(resize(unsigned(buff_C_val_1_0_i_fu_184),16));
    tmp_35_1_2_i_i_fu_1059_p1 <= std_logic_vector(resize(unsigned(buff_C_val_1_1_i_fu_188),16));
    tmp_35_1_i_i_fu_1051_p1 <= std_logic_vector(resize(unsigned(buff_C_val_1_0_fu_1016_p3),16));
    tmp_35_2_1_i_i_fu_1087_p1 <= std_logic_vector(resize(unsigned(buff_C_val_2_0_i_fu_196),16));
    tmp_35_2_i_i_fu_1073_p1 <= std_logic_vector(resize(unsigned(buff_C_val_2_0_fu_1009_p3),16));
    tmp_35_i_fu_882_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_col_assign_reg_438_pp0_it1),64));
        tmp_36_0_1_i_i_fu_566_p1 <= std_logic_vector(resize(signed(tmp_87_fu_494_p1),16));

        tmp_36_0_2_i_i_fu_574_p1 <= std_logic_vector(resize(signed(tmp_88_fu_498_p1),16));

        tmp_36_0_i_i_fu_558_p1 <= std_logic_vector(resize(signed(tmp_86_fu_490_p1),16));

        tmp_36_1_1_i_i_fu_590_p1 <= std_logic_vector(resize(signed(tmp_90_fu_506_p1),16));

        tmp_36_1_2_i_i_fu_598_p1 <= std_logic_vector(resize(signed(tmp_91_fu_510_p1),16));

        tmp_36_1_i_i_fu_582_p1 <= std_logic_vector(resize(signed(tmp_89_fu_502_p1),16));

        tmp_36_2_1_i_i_fu_614_p1 <= std_logic_vector(resize(signed(tmp_93_fu_518_p1),16));

        tmp_36_2_2_i_i_fu_622_p1 <= std_logic_vector(resize(signed(tmp_94_fu_522_p1),16));

        tmp_36_2_i_i_fu_606_p1 <= std_logic_vector(resize(signed(tmp_92_fu_514_p1),16));

    tmp_37_0_1_i_i_fu_1037_p0 <= tmp_35_0_1_i_i_fu_1033_p1(8 - 1 downto 0);
    tmp_37_0_1_i_i_fu_1037_p1 <= tmp_36_0_1_i_i_reg_1491(8 - 1 downto 0);
    tmp_37_1_2_i_i_fu_1063_p0 <= tmp_35_1_2_i_i_fu_1059_p1(8 - 1 downto 0);
    tmp_37_1_2_i_i_fu_1063_p1 <= tmp_36_1_2_i_i_reg_1531(8 - 1 downto 0);
    tmp_37_2_2_i_i_fu_1095_p0 <= tmp_37_2_2_i_i_fu_1095_p00(8 - 1 downto 0);
    tmp_37_2_2_i_i_fu_1095_p00 <= std_logic_vector(resize(unsigned(buff_C_val_2_1_i_fu_192),16));
    tmp_37_2_2_i_i_fu_1095_p1 <= tmp_36_2_2_i_i_reg_1561(8 - 1 downto 0);
    tmp_37_2_2_i_i_fu_1095_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &tmp_37_2_2_i_i_fu_1095_p0) * signed(tmp_37_2_2_i_i_fu_1095_p1))), 16));
    tmp_37_2_i_i_fu_1077_p0 <= tmp_35_2_i_i_fu_1073_p1(8 - 1 downto 0);
    tmp_37_2_i_i_fu_1077_p1 <= tmp_36_2_i_i_reg_1541(8 - 1 downto 0);
    tmp_37_i_fu_726_p2 <= "1" when (signed(col_assign_cast_cast_i_fu_679_p1) > signed(tmp_25_i_cast_reg_1466)) else "0";
        tmp_38_0_1_i_i_fu_570_p1 <= std_logic_vector(resize(signed(tmp_96_fu_530_p1),16));

        tmp_38_0_2_i_i_fu_578_p1 <= std_logic_vector(resize(signed(tmp_97_fu_534_p1),16));

        tmp_38_0_i_i_fu_562_p1 <= std_logic_vector(resize(signed(tmp_95_fu_526_p1),16));

        tmp_38_1_1_i_i_fu_594_p1 <= std_logic_vector(resize(signed(tmp_99_fu_542_p1),16));

        tmp_38_1_2_i_i_fu_602_p1 <= std_logic_vector(resize(signed(tmp_100_fu_546_p1),16));

        tmp_38_1_i_i_fu_586_p1 <= std_logic_vector(resize(signed(tmp_98_fu_538_p1),16));

        tmp_38_2_1_i_i_fu_618_p1 <= std_logic_vector(resize(signed(tmp_102_fu_554_p1),16));

        tmp_38_2_i_i_fu_610_p1 <= std_logic_vector(resize(signed(tmp_101_fu_550_p1),16));

    tmp_38_i_fu_747_p2 <= "0" when (col_assign_phi_fu_442_p4 = ap_const_lv11_0) else "1";
    tmp_39_0_1_i_i_fu_1042_p0 <= tmp_35_0_1_i_i_fu_1033_p1(8 - 1 downto 0);
    tmp_39_0_1_i_i_fu_1042_p1 <= tmp_38_0_1_i_i_reg_1496(8 - 1 downto 0);
    tmp_39_1_2_i_i_fu_1068_p0 <= tmp_35_1_2_i_i_fu_1059_p1(8 - 1 downto 0);
    tmp_39_1_2_i_i_fu_1068_p1 <= tmp_38_1_2_i_i_reg_1536(8 - 1 downto 0);
    tmp_39_2_i_i_fu_1082_p0 <= tmp_35_2_i_i_fu_1073_p1(8 - 1 downto 0);
    tmp_39_2_i_i_fu_1082_p1 <= tmp_38_2_i_i_reg_1546(8 - 1 downto 0);
    tmp_58_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(rows_cast_i_cast_fu_450_p1));
    tmp_6_i44_cast_i_fu_974_p1 <= std_logic_vector(resize(unsigned(tmp_6_i44_i_fu_968_p2),16));
    tmp_6_i44_i_fu_968_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_964_p1) + unsigned(p_shl1_i36_cast_i_fu_922_p1));
    tmp_6_i_cast_i_fu_823_p1 <= std_logic_vector(resize(unsigned(tmp_6_i_i_fu_817_p2),16));
    tmp_6_i_i_fu_817_p2 <= std_logic_vector(unsigned(p_shl1_i_cast_i_fu_771_p1) + unsigned(tmp2_cast_fu_813_p1));
    tmp_86_fu_490_p1 <= C_XR0C0_dout(8 - 1 downto 0);
    tmp_87_fu_494_p1 <= C_XR0C1_dout(8 - 1 downto 0);
    tmp_88_fu_498_p1 <= C_XR0C2_dout(8 - 1 downto 0);
    tmp_89_fu_502_p1 <= C_XR1C0_dout(8 - 1 downto 0);
    tmp_8_i46_i_fu_987_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_984_p1) + unsigned(tmp6_fu_978_p2));
    tmp_8_i_i_fu_836_p2 <= std_logic_vector(unsigned(tmp3_fu_827_p2) + unsigned(tmp4_cast_fu_833_p1));
    tmp_90_fu_506_p1 <= C_XR1C1_dout(8 - 1 downto 0);
    tmp_91_fu_510_p1 <= C_XR1C2_dout(8 - 1 downto 0);
    tmp_92_fu_514_p1 <= C_XR2C0_dout(8 - 1 downto 0);
    tmp_93_fu_518_p1 <= C_XR2C1_dout(8 - 1 downto 0);
    tmp_94_fu_522_p1 <= C_XR2C2_dout(8 - 1 downto 0);
    tmp_95_fu_526_p1 <= C_YR0C0_dout(8 - 1 downto 0);
    tmp_96_fu_530_p1 <= C_YR0C1_dout(8 - 1 downto 0);
    tmp_97_fu_534_p1 <= C_YR0C2_dout(8 - 1 downto 0);
    tmp_98_fu_538_p1 <= C_YR1C0_dout(8 - 1 downto 0);
    tmp_99_fu_542_p1 <= C_YR1C1_dout(8 - 1 downto 0);
    tmp_i48_i_fu_993_p4 <= tmp_8_i46_i_fu_987_p2(15 downto 8);
    tmp_i_i_fu_842_p4 <= tmp_8_i_i_fu_836_p2(15 downto 8);
    tmp_s_fu_478_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(cols_cast_i_cast_fu_464_p1));
    x_weight_2_2_2_i_i_fu_1108_p2 <= std_logic_vector(signed(tmp25_fu_1104_p2) + signed(tmp22_fu_1100_p2));
    y_2_fu_1003_p2 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_i48_i_fu_993_p4));
    y_weight_2_2_2_i_i_fu_1122_p2 <= std_logic_vector(signed(tmp32_fu_1118_p2) + signed(tmp29_fu_1114_p2));
end behav;
