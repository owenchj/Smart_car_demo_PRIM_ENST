-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    video_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    video_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC;
    video_out_TVALID : OUT STD_LOGIC;
    video_out_TREADY : IN STD_LOGIC );
end;


architecture behav of sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=35.796000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=12,HLS_SYN_DSP=31,HLS_SYN_FF=2850,HLS_SYN_LUT=5367}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal sobel_CONTROL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_high_thresh : STD_LOGIC_VECTOR (31 downto 0);
    signal c_low_thresh : STD_LOGIC_VECTOR (31 downto 0);
    signal c_invert : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_ap_start : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_ap_done : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_ap_continue : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_ap_idle : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_ap_ready : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR2C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR2C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_c_high_thresh : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_c_low_thresh : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_c_invert : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_empty_3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_empty_4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_empty : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out1_din : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out1_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out1_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out2_din : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out2_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out2_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C0_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C0_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C0_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C0_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C2_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C2_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C0_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C0_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C2_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C2_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR2C0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR2C0_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR2C0_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR2C1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR2C1_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR2C1_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_c_high_thresh_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_c_high_thresh_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_c_high_thresh_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C1_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR1C1_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C2_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C2_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C1_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_YR0C1_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C2_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C2_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C0_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C0_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C1_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C1_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C2_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR0C2_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C0_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C0_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C0_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C1_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR2C1_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C1_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C1_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_C_XR1C1_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_c_low_thresh_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_c_low_thresh_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_c_low_thresh_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_c_invert_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_c_invert_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_c_invert_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_p_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_p_out_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_p_out_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_p_out1_din : STD_LOGIC_VECTOR (8 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_p_out1_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_p_out1_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_p_out2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_p_out2_full_n : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_p_out2_write : STD_LOGIC;
    signal sobel_Block_Mat_exit49_proc88_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_ap_return_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Block_Mat_exit49_proc88_U0_ap_return_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_rows_V_channel : STD_LOGIC;
    signal img_3_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_3_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_3_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_rows_V_channel : STD_LOGIC;
    signal img_2_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_2_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_2_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_cols_V_channel : STD_LOGIC;
    signal img_2_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_2_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_2_cols_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_cols_V_channel : STD_LOGIC;
    signal img_3_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_3_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_3_cols_V_channel_full_n : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_ap_start : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_ap_done : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_ap_continue : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_ap_idle : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TVALID : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TREADY : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_rows_V_empty_n : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_rows_V_read : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_cols_V_empty_n : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_cols_V_read : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_0_V_full_n : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_1_V_full_n : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_2_V_full_n : STD_LOGIC;
    signal sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal sobel_GaussianBlur_U0_ap_start : STD_LOGIC := '0';
    signal sobel_GaussianBlur_U0_ap_done : STD_LOGIC;
    signal sobel_GaussianBlur_U0_ap_continue : STD_LOGIC;
    signal sobel_GaussianBlur_U0_ap_idle : STD_LOGIC;
    signal sobel_GaussianBlur_U0_ap_ready : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_GaussianBlur_U0_p_src_rows_V_empty_n : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_rows_V_read : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_GaussianBlur_U0_p_src_cols_V_empty_n : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_cols_V_read : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_GaussianBlur_U0_p_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_GaussianBlur_U0_p_src_data_stream_1_V_empty_n : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_GaussianBlur_U0_p_src_data_stream_2_V_empty_n : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_GaussianBlur_U0_p_dst_data_stream_0_V_full_n : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_GaussianBlur_U0_p_dst_data_stream_1_V_full_n : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_GaussianBlur_U0_p_dst_data_stream_2_V_full_n : STD_LOGIC;
    signal sobel_GaussianBlur_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_ap_start : STD_LOGIC := '0';
    signal sobel_sobel_filter_core_U0_ap_done : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_ap_continue : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_ap_idle : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_ap_ready : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_sobel_filter_core_U0_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_sobel_filter_core_U0_src_data_stream_1_V_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_sobel_filter_core_U0_src_data_stream_2_V_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_sobel_filter_core_U0_dst_data_stream_V_full_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_dst_data_stream_V_write : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_rows_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal sobel_sobel_filter_core_U0_rows_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_rows_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_cols_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal sobel_sobel_filter_core_U0_cols_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_cols_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR0C0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_XR0C0_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR0C0_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR0C1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_XR0C1_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR0C1_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR0C2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_XR0C2_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR0C2_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR1C0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_XR1C0_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR1C0_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR1C1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_XR1C1_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR1C1_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR1C2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_XR1C2_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR1C2_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR2C0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_XR2C0_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR2C0_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR2C1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_XR2C1_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR2C1_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR2C2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_XR2C2_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_XR2C2_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR0C0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_YR0C0_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR0C0_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR0C1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_YR0C1_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR0C1_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR0C2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_YR0C2_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR0C2_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR1C0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_YR1C0_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR1C0_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR1C1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_YR1C1_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR1C1_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR1C2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_YR1C2_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR1C2_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR2C0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_YR2C0_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR2C0_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR2C1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_C_YR2C1_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_C_YR2C1_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_c_high_thresh_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_c_high_thresh_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_c_high_thresh_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_c_low_thresh_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_c_low_thresh_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_c_low_thresh_read : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_c_invert_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sobel_sobel_filter_core_U0_c_invert_empty_n : STD_LOGIC;
    signal sobel_sobel_filter_core_U0_c_invert_read : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_ap_start : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_ap_done : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_ap_continue : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_ap_idle : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_ap_ready : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Threshold_480_640_0_0_U0_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Threshold_480_640_0_0_U0_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_Threshold_480_640_0_0_U0_src_data_stream_V_empty_n : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_src_data_stream_V_read : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_Threshold_480_640_0_0_U0_dst_data_stream_V_full_n : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_dst_data_stream_V_write : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_thresh_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_Threshold_480_640_0_0_U0_thresh_empty_n : STD_LOGIC;
    signal sobel_Threshold_480_640_0_0_U0_thresh_read : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_ap_start : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_ap_done : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_ap_continue : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_ap_idle : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_ap_ready : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_img_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_img_data_stream_V_empty_n : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_img_data_stream_V_read : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TVALID : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TREADY : STD_LOGIC;
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal img_0_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_full_n : STD_LOGIC;
    signal img_0_rows_V_channel_write : STD_LOGIC;
    signal img_0_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel_read : STD_LOGIC;
    signal img_0_rows_V_channel23_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_rows_V_channel23_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel23_full_n : STD_LOGIC;
    signal img_0_rows_V_channel23_write : STD_LOGIC;
    signal img_0_rows_V_channel23_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel23_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel23_read : STD_LOGIC;
    signal img_0_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_full_n : STD_LOGIC;
    signal img_0_cols_V_channel_write : STD_LOGIC;
    signal img_0_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel_read : STD_LOGIC;
    signal img_0_cols_V_channel24_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_cols_V_channel24_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel24_full_n : STD_LOGIC;
    signal img_0_cols_V_channel24_write : STD_LOGIC;
    signal img_0_cols_V_channel24_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel24_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel24_read : STD_LOGIC;
    signal C_XR2C0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_XR2C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C0_channel_full_n : STD_LOGIC;
    signal C_XR2C0_channel_write : STD_LOGIC;
    signal C_XR2C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C0_channel_empty_n : STD_LOGIC;
    signal C_XR2C0_channel_read : STD_LOGIC;
    signal C_YR0C0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_YR0C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C0_channel_full_n : STD_LOGIC;
    signal C_YR0C0_channel_write : STD_LOGIC;
    signal C_YR0C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C0_channel_empty_n : STD_LOGIC;
    signal C_YR0C0_channel_read : STD_LOGIC;
    signal C_YR0C2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_YR0C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C2_channel_full_n : STD_LOGIC;
    signal C_YR0C2_channel_write : STD_LOGIC;
    signal C_YR0C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C2_channel_empty_n : STD_LOGIC;
    signal C_YR0C2_channel_read : STD_LOGIC;
    signal C_YR1C0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_YR1C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C0_channel_full_n : STD_LOGIC;
    signal C_YR1C0_channel_write : STD_LOGIC;
    signal C_YR1C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C0_channel_empty_n : STD_LOGIC;
    signal C_YR1C0_channel_read : STD_LOGIC;
    signal C_YR1C2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_YR1C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C2_channel_full_n : STD_LOGIC;
    signal C_YR1C2_channel_write : STD_LOGIC;
    signal C_YR1C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C2_channel_empty_n : STD_LOGIC;
    signal C_YR1C2_channel_read : STD_LOGIC;
    signal C_YR2C0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_YR2C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C0_channel_full_n : STD_LOGIC;
    signal C_YR2C0_channel_write : STD_LOGIC;
    signal C_YR2C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C0_channel_empty_n : STD_LOGIC;
    signal C_YR2C0_channel_read : STD_LOGIC;
    signal C_YR2C1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_YR2C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C1_channel_full_n : STD_LOGIC;
    signal C_YR2C1_channel_write : STD_LOGIC;
    signal C_YR2C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C1_channel_empty_n : STD_LOGIC;
    signal C_YR2C1_channel_read : STD_LOGIC;
    signal c_high_thresh_channel_U_ap_dummy_ce : STD_LOGIC;
    signal c_high_thresh_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal c_high_thresh_channel_full_n : STD_LOGIC;
    signal c_high_thresh_channel_write : STD_LOGIC;
    signal c_high_thresh_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_high_thresh_channel_empty_n : STD_LOGIC;
    signal c_high_thresh_channel_read : STD_LOGIC;
    signal C_YR1C1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_YR1C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C1_channel_full_n : STD_LOGIC;
    signal C_YR1C1_channel_write : STD_LOGIC;
    signal C_YR1C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C1_channel_empty_n : STD_LOGIC;
    signal C_YR1C1_channel_read : STD_LOGIC;
    signal C_XR1C2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_XR1C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C2_channel_full_n : STD_LOGIC;
    signal C_XR1C2_channel_write : STD_LOGIC;
    signal C_XR1C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C2_channel_empty_n : STD_LOGIC;
    signal C_XR1C2_channel_read : STD_LOGIC;
    signal C_YR0C1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_YR0C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C1_channel_full_n : STD_LOGIC;
    signal C_YR0C1_channel_write : STD_LOGIC;
    signal C_YR0C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C1_channel_empty_n : STD_LOGIC;
    signal C_YR0C1_channel_read : STD_LOGIC;
    signal C_XR2C2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_XR2C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C2_channel_full_n : STD_LOGIC;
    signal C_XR2C2_channel_write : STD_LOGIC;
    signal C_XR2C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C2_channel_empty_n : STD_LOGIC;
    signal C_XR2C2_channel_read : STD_LOGIC;
    signal C_XR0C0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_XR0C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C0_channel_full_n : STD_LOGIC;
    signal C_XR0C0_channel_write : STD_LOGIC;
    signal C_XR0C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C0_channel_empty_n : STD_LOGIC;
    signal C_XR0C0_channel_read : STD_LOGIC;
    signal C_XR0C1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_XR0C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C1_channel_full_n : STD_LOGIC;
    signal C_XR0C1_channel_write : STD_LOGIC;
    signal C_XR0C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C1_channel_empty_n : STD_LOGIC;
    signal C_XR0C1_channel_read : STD_LOGIC;
    signal C_XR0C2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_XR0C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C2_channel_full_n : STD_LOGIC;
    signal C_XR0C2_channel_write : STD_LOGIC;
    signal C_XR0C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C2_channel_empty_n : STD_LOGIC;
    signal C_XR0C2_channel_read : STD_LOGIC;
    signal C_XR1C0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_XR1C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C0_channel_full_n : STD_LOGIC;
    signal C_XR1C0_channel_write : STD_LOGIC;
    signal C_XR1C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C0_channel_empty_n : STD_LOGIC;
    signal C_XR1C0_channel_read : STD_LOGIC;
    signal C_XR2C1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_XR2C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C1_channel_full_n : STD_LOGIC;
    signal C_XR2C1_channel_write : STD_LOGIC;
    signal C_XR2C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C1_channel_empty_n : STD_LOGIC;
    signal C_XR2C1_channel_read : STD_LOGIC;
    signal C_XR1C1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal C_XR1C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C1_channel_full_n : STD_LOGIC;
    signal C_XR1C1_channel_write : STD_LOGIC;
    signal C_XR1C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C1_channel_empty_n : STD_LOGIC;
    signal C_XR1C1_channel_read : STD_LOGIC;
    signal c_low_thresh_channel_U_ap_dummy_ce : STD_LOGIC;
    signal c_low_thresh_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal c_low_thresh_channel_full_n : STD_LOGIC;
    signal c_low_thresh_channel_write : STD_LOGIC;
    signal c_low_thresh_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_low_thresh_channel_empty_n : STD_LOGIC;
    signal c_low_thresh_channel_read : STD_LOGIC;
    signal c_invert_channel_U_ap_dummy_ce : STD_LOGIC;
    signal c_invert_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal c_invert_channel_full_n : STD_LOGIC;
    signal c_invert_channel_write : STD_LOGIC;
    signal c_invert_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_invert_channel_empty_n : STD_LOGIC;
    signal c_invert_channel_read : STD_LOGIC;
    signal p_channel_U_ap_dummy_ce : STD_LOGIC;
    signal p_channel_din : STD_LOGIC_VECTOR (9 downto 0);
    signal p_channel_full_n : STD_LOGIC;
    signal p_channel_write : STD_LOGIC;
    signal p_channel_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal p_channel_empty_n : STD_LOGIC;
    signal p_channel_read : STD_LOGIC;
    signal p_channel25_U_ap_dummy_ce : STD_LOGIC;
    signal p_channel25_din : STD_LOGIC_VECTOR (8 downto 0);
    signal p_channel25_full_n : STD_LOGIC;
    signal p_channel25_write : STD_LOGIC;
    signal p_channel25_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal p_channel25_empty_n : STD_LOGIC;
    signal p_channel25_read : STD_LOGIC;
    signal p_channel26_U_ap_dummy_ce : STD_LOGIC;
    signal p_channel26_din : STD_LOGIC_VECTOR (7 downto 0);
    signal p_channel26_full_n : STD_LOGIC;
    signal p_channel26_write : STD_LOGIC;
    signal p_channel26_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_channel26_empty_n : STD_LOGIC;
    signal p_channel26_read : STD_LOGIC;
    signal img_2_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_2_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_2_rows_V_channel_write : STD_LOGIC;
    signal img_2_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_2_rows_V_channel_empty_n : STD_LOGIC;
    signal img_2_rows_V_channel_read : STD_LOGIC;
    signal img_2_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_2_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_2_cols_V_channel_write : STD_LOGIC;
    signal img_2_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_2_cols_V_channel_empty_n : STD_LOGIC;
    signal img_2_cols_V_channel_read : STD_LOGIC;
    signal img_3_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_3_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_3_rows_V_channel_write : STD_LOGIC;
    signal img_3_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_3_rows_V_channel_empty_n : STD_LOGIC;
    signal img_3_rows_V_channel_read : STD_LOGIC;
    signal img_3_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_3_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_3_cols_V_channel_write : STD_LOGIC;
    signal img_3_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_3_cols_V_channel_empty_n : STD_LOGIC;
    signal img_3_cols_V_channel_read : STD_LOGIC;
    signal img_0_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_full_n : STD_LOGIC;
    signal img_0_data_stream_0_V_write : STD_LOGIC;
    signal img_0_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_V_read : STD_LOGIC;
    signal img_0_data_stream_1_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_V_full_n : STD_LOGIC;
    signal img_0_data_stream_1_V_write : STD_LOGIC;
    signal img_0_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_V_read : STD_LOGIC;
    signal img_0_data_stream_2_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_V_full_n : STD_LOGIC;
    signal img_0_data_stream_2_V_write : STD_LOGIC;
    signal img_0_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_V_read : STD_LOGIC;
    signal img_1_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_write : STD_LOGIC;
    signal img_1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_read : STD_LOGIC;
    signal img_1_data_stream_1_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_V_full_n : STD_LOGIC;
    signal img_1_data_stream_1_V_write : STD_LOGIC;
    signal img_1_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_V_read : STD_LOGIC;
    signal img_1_data_stream_2_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_V_full_n : STD_LOGIC;
    signal img_1_data_stream_2_V_write : STD_LOGIC;
    signal img_1_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_2_V_read : STD_LOGIC;
    signal img_2_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_2_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_V_full_n : STD_LOGIC;
    signal img_2_data_stream_0_V_write : STD_LOGIC;
    signal img_2_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_V_read : STD_LOGIC;
    signal img_3_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_3_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_0_V_full_n : STD_LOGIC;
    signal img_3_data_stream_0_V_write : STD_LOGIC;
    signal img_3_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_3_data_stream_0_V_read : STD_LOGIC;
    signal ap_reg_procdone_sobel_Block_Mat_exit49_proc88_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_sobel_AXIvideo2Mat_24_480_640_32_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_sobel_GaussianBlur_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_sobel_sobel_filter_core_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_sobel_Threshold_480_640_0_0_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_sobel_Mat2AXIvideo_8_480_640_0_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_sobel_Block_Mat_exit49_proc88_U0_ap_start : STD_LOGIC;

    component sobel_Block_Mat_exit49_proc88 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_high_thresh : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_low_thresh : IN STD_LOGIC_VECTOR (31 downto 0);
        c_invert : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_3 : IN STD_LOGIC_VECTOR (9 downto 0);
        empty_4 : IN STD_LOGIC_VECTOR (8 downto 0);
        empty : IN STD_LOGIC_VECTOR (7 downto 0);
        img_0_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_0_rows_V_out_full_n : IN STD_LOGIC;
        img_0_rows_V_out_write : OUT STD_LOGIC;
        img_0_rows_V_out1_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_0_rows_V_out1_full_n : IN STD_LOGIC;
        img_0_rows_V_out1_write : OUT STD_LOGIC;
        img_0_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_0_cols_V_out_full_n : IN STD_LOGIC;
        img_0_cols_V_out_write : OUT STD_LOGIC;
        img_0_cols_V_out2_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_0_cols_V_out2_full_n : IN STD_LOGIC;
        img_0_cols_V_out2_write : OUT STD_LOGIC;
        C_XR2C0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C0_out_full_n : IN STD_LOGIC;
        C_XR2C0_out_write : OUT STD_LOGIC;
        C_YR0C0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C0_out_full_n : IN STD_LOGIC;
        C_YR0C0_out_write : OUT STD_LOGIC;
        C_YR0C2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C2_out_full_n : IN STD_LOGIC;
        C_YR0C2_out_write : OUT STD_LOGIC;
        C_YR1C0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C0_out_full_n : IN STD_LOGIC;
        C_YR1C0_out_write : OUT STD_LOGIC;
        C_YR1C2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C2_out_full_n : IN STD_LOGIC;
        C_YR1C2_out_write : OUT STD_LOGIC;
        C_YR2C0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C0_out_full_n : IN STD_LOGIC;
        C_YR2C0_out_write : OUT STD_LOGIC;
        C_YR2C1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C1_out_full_n : IN STD_LOGIC;
        C_YR2C1_out_write : OUT STD_LOGIC;
        c_high_thresh_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_high_thresh_out_full_n : IN STD_LOGIC;
        c_high_thresh_out_write : OUT STD_LOGIC;
        C_YR1C1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C1_out_full_n : IN STD_LOGIC;
        C_YR1C1_out_write : OUT STD_LOGIC;
        C_XR1C2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C2_out_full_n : IN STD_LOGIC;
        C_XR1C2_out_write : OUT STD_LOGIC;
        C_YR0C1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C1_out_full_n : IN STD_LOGIC;
        C_YR0C1_out_write : OUT STD_LOGIC;
        C_XR2C2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C2_out_full_n : IN STD_LOGIC;
        C_XR2C2_out_write : OUT STD_LOGIC;
        C_XR0C0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C0_out_full_n : IN STD_LOGIC;
        C_XR0C0_out_write : OUT STD_LOGIC;
        C_XR0C1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C1_out_full_n : IN STD_LOGIC;
        C_XR0C1_out_write : OUT STD_LOGIC;
        C_XR0C2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C2_out_full_n : IN STD_LOGIC;
        C_XR0C2_out_write : OUT STD_LOGIC;
        C_XR1C0_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C0_out_full_n : IN STD_LOGIC;
        C_XR1C0_out_write : OUT STD_LOGIC;
        C_XR2C1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C1_out_full_n : IN STD_LOGIC;
        C_XR2C1_out_write : OUT STD_LOGIC;
        C_XR1C1_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C1_out_full_n : IN STD_LOGIC;
        C_XR1C1_out_write : OUT STD_LOGIC;
        c_low_thresh_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_low_thresh_out_full_n : IN STD_LOGIC;
        c_low_thresh_out_write : OUT STD_LOGIC;
        c_invert_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_invert_out_full_n : IN STD_LOGIC;
        c_invert_out_write : OUT STD_LOGIC;
        p_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        p_out_full_n : IN STD_LOGIC;
        p_out_write : OUT STD_LOGIC;
        p_out1_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_out1_full_n : IN STD_LOGIC;
        p_out1_write : OUT STD_LOGIC;
        p_out2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_out2_full_n : IN STD_LOGIC;
        p_out2_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component sobel_AXIvideo2Mat_24_480_640_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        video_in_TVALID : IN STD_LOGIC;
        video_in_TREADY : OUT STD_LOGIC;
        video_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        video_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component sobel_GaussianBlur IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component sobel_sobel_filter_core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        C_XR0C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C0_empty_n : IN STD_LOGIC;
        C_XR0C0_read : OUT STD_LOGIC;
        C_XR0C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C1_empty_n : IN STD_LOGIC;
        C_XR0C1_read : OUT STD_LOGIC;
        C_XR0C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C2_empty_n : IN STD_LOGIC;
        C_XR0C2_read : OUT STD_LOGIC;
        C_XR1C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C0_empty_n : IN STD_LOGIC;
        C_XR1C0_read : OUT STD_LOGIC;
        C_XR1C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C1_empty_n : IN STD_LOGIC;
        C_XR1C1_read : OUT STD_LOGIC;
        C_XR1C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C2_empty_n : IN STD_LOGIC;
        C_XR1C2_read : OUT STD_LOGIC;
        C_XR2C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C0_empty_n : IN STD_LOGIC;
        C_XR2C0_read : OUT STD_LOGIC;
        C_XR2C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C1_empty_n : IN STD_LOGIC;
        C_XR2C1_read : OUT STD_LOGIC;
        C_XR2C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C2_empty_n : IN STD_LOGIC;
        C_XR2C2_read : OUT STD_LOGIC;
        C_YR0C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C0_empty_n : IN STD_LOGIC;
        C_YR0C0_read : OUT STD_LOGIC;
        C_YR0C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C1_empty_n : IN STD_LOGIC;
        C_YR0C1_read : OUT STD_LOGIC;
        C_YR0C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C2_empty_n : IN STD_LOGIC;
        C_YR0C2_read : OUT STD_LOGIC;
        C_YR1C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C0_empty_n : IN STD_LOGIC;
        C_YR1C0_read : OUT STD_LOGIC;
        C_YR1C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C1_empty_n : IN STD_LOGIC;
        C_YR1C1_read : OUT STD_LOGIC;
        C_YR1C2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C2_empty_n : IN STD_LOGIC;
        C_YR1C2_read : OUT STD_LOGIC;
        C_YR2C0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C0_empty_n : IN STD_LOGIC;
        C_YR2C0_read : OUT STD_LOGIC;
        C_YR2C1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C1_empty_n : IN STD_LOGIC;
        C_YR2C1_read : OUT STD_LOGIC;
        c_high_thresh_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_high_thresh_empty_n : IN STD_LOGIC;
        c_high_thresh_read : OUT STD_LOGIC;
        c_low_thresh_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_low_thresh_empty_n : IN STD_LOGIC;
        c_low_thresh_read : OUT STD_LOGIC;
        c_invert_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_invert_empty_n : IN STD_LOGIC;
        c_invert_read : OUT STD_LOGIC );
    end component;


    component sobel_Threshold_480_640_0_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        thresh_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        thresh_empty_n : IN STD_LOGIC;
        thresh_read : OUT STD_LOGIC );
    end component;


    component sobel_Mat2AXIvideo_8_480_640_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        video_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        video_out_TVALID : OUT STD_LOGIC;
        video_out_TREADY : IN STD_LOGIC;
        video_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_sobel_img_0_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_0_rows_V_channel23 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_0_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_0_cols_V_channel24 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_XR2C0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_YR0C0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_YR0C2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_YR1C0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_YR1C2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_YR2C0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_YR2C1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_c_high_thresh_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_YR1C1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_XR1C2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_YR0C1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_XR2C2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_XR0C0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_XR0C1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_XR0C2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_XR1C0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_XR2C1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_C_XR1C1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_c_low_thresh_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_c_invert_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_p_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_p_channel25 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_p_channel26 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_2_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_2_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_3_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_3_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_0_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_0_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_1_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_1_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_2_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_sobel_img_3_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sobel_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_high_thresh : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_low_thresh : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_invert : OUT STD_LOGIC_VECTOR (31 downto 0);
        threshold : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sobel_CONTROL_BUS_s_axi_U : component sobel_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => sobel_CONTROL_BUS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rows => rows,
        cols => cols,
        C_XR0C0 => C_XR0C0,
        C_XR0C1 => C_XR0C1,
        C_XR0C2 => C_XR0C2,
        C_XR1C0 => C_XR1C0,
        C_XR1C1 => C_XR1C1,
        C_XR1C2 => C_XR1C2,
        C_XR2C0 => C_XR2C0,
        C_XR2C1 => C_XR2C1,
        C_XR2C2 => C_XR2C2,
        C_YR0C0 => C_YR0C0,
        C_YR0C1 => C_YR0C1,
        C_YR0C2 => C_YR0C2,
        C_YR1C0 => C_YR1C0,
        C_YR1C1 => C_YR1C1,
        C_YR1C2 => C_YR1C2,
        C_YR2C0 => C_YR2C0,
        C_YR2C1 => C_YR2C1,
        C_YR2C2 => C_YR2C2,
        c_high_thresh => c_high_thresh,
        c_low_thresh => c_low_thresh,
        c_invert => c_invert,
        threshold => threshold);

    sobel_Block_Mat_exit49_proc88_U0 : component sobel_Block_Mat_exit49_proc88
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_Block_Mat_exit49_proc88_U0_ap_start,
        ap_done => sobel_Block_Mat_exit49_proc88_U0_ap_done,
        ap_continue => sobel_Block_Mat_exit49_proc88_U0_ap_continue,
        ap_idle => sobel_Block_Mat_exit49_proc88_U0_ap_idle,
        ap_ready => sobel_Block_Mat_exit49_proc88_U0_ap_ready,
        rows => sobel_Block_Mat_exit49_proc88_U0_rows,
        cols => sobel_Block_Mat_exit49_proc88_U0_cols,
        C_XR2C0 => sobel_Block_Mat_exit49_proc88_U0_C_XR2C0,
        C_YR0C0 => sobel_Block_Mat_exit49_proc88_U0_C_YR0C0,
        C_YR0C2 => sobel_Block_Mat_exit49_proc88_U0_C_YR0C2,
        C_YR1C0 => sobel_Block_Mat_exit49_proc88_U0_C_YR1C0,
        C_YR1C2 => sobel_Block_Mat_exit49_proc88_U0_C_YR1C2,
        C_YR2C0 => sobel_Block_Mat_exit49_proc88_U0_C_YR2C0,
        C_YR2C1 => sobel_Block_Mat_exit49_proc88_U0_C_YR2C1,
        c_high_thresh => sobel_Block_Mat_exit49_proc88_U0_c_high_thresh,
        C_YR1C1 => sobel_Block_Mat_exit49_proc88_U0_C_YR1C1,
        C_XR1C2 => sobel_Block_Mat_exit49_proc88_U0_C_XR1C2,
        C_YR0C1 => sobel_Block_Mat_exit49_proc88_U0_C_YR0C1,
        C_XR2C2 => sobel_Block_Mat_exit49_proc88_U0_C_XR2C2,
        C_XR0C0 => sobel_Block_Mat_exit49_proc88_U0_C_XR0C0,
        C_XR0C1 => sobel_Block_Mat_exit49_proc88_U0_C_XR0C1,
        C_XR0C2 => sobel_Block_Mat_exit49_proc88_U0_C_XR0C2,
        C_XR1C0 => sobel_Block_Mat_exit49_proc88_U0_C_XR1C0,
        C_XR2C1 => sobel_Block_Mat_exit49_proc88_U0_C_XR2C1,
        C_XR1C1 => sobel_Block_Mat_exit49_proc88_U0_C_XR1C1,
        c_low_thresh => sobel_Block_Mat_exit49_proc88_U0_c_low_thresh,
        c_invert => sobel_Block_Mat_exit49_proc88_U0_c_invert,
        empty_3 => sobel_Block_Mat_exit49_proc88_U0_empty_3,
        empty_4 => sobel_Block_Mat_exit49_proc88_U0_empty_4,
        empty => sobel_Block_Mat_exit49_proc88_U0_empty,
        img_0_rows_V_out_din => sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out_din,
        img_0_rows_V_out_full_n => sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out_full_n,
        img_0_rows_V_out_write => sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out_write,
        img_0_rows_V_out1_din => sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out1_din,
        img_0_rows_V_out1_full_n => sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out1_full_n,
        img_0_rows_V_out1_write => sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out1_write,
        img_0_cols_V_out_din => sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out_din,
        img_0_cols_V_out_full_n => sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out_full_n,
        img_0_cols_V_out_write => sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out_write,
        img_0_cols_V_out2_din => sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out2_din,
        img_0_cols_V_out2_full_n => sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out2_full_n,
        img_0_cols_V_out2_write => sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out2_write,
        C_XR2C0_out_din => sobel_Block_Mat_exit49_proc88_U0_C_XR2C0_out_din,
        C_XR2C0_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_XR2C0_out_full_n,
        C_XR2C0_out_write => sobel_Block_Mat_exit49_proc88_U0_C_XR2C0_out_write,
        C_YR0C0_out_din => sobel_Block_Mat_exit49_proc88_U0_C_YR0C0_out_din,
        C_YR0C0_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_YR0C0_out_full_n,
        C_YR0C0_out_write => sobel_Block_Mat_exit49_proc88_U0_C_YR0C0_out_write,
        C_YR0C2_out_din => sobel_Block_Mat_exit49_proc88_U0_C_YR0C2_out_din,
        C_YR0C2_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_YR0C2_out_full_n,
        C_YR0C2_out_write => sobel_Block_Mat_exit49_proc88_U0_C_YR0C2_out_write,
        C_YR1C0_out_din => sobel_Block_Mat_exit49_proc88_U0_C_YR1C0_out_din,
        C_YR1C0_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_YR1C0_out_full_n,
        C_YR1C0_out_write => sobel_Block_Mat_exit49_proc88_U0_C_YR1C0_out_write,
        C_YR1C2_out_din => sobel_Block_Mat_exit49_proc88_U0_C_YR1C2_out_din,
        C_YR1C2_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_YR1C2_out_full_n,
        C_YR1C2_out_write => sobel_Block_Mat_exit49_proc88_U0_C_YR1C2_out_write,
        C_YR2C0_out_din => sobel_Block_Mat_exit49_proc88_U0_C_YR2C0_out_din,
        C_YR2C0_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_YR2C0_out_full_n,
        C_YR2C0_out_write => sobel_Block_Mat_exit49_proc88_U0_C_YR2C0_out_write,
        C_YR2C1_out_din => sobel_Block_Mat_exit49_proc88_U0_C_YR2C1_out_din,
        C_YR2C1_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_YR2C1_out_full_n,
        C_YR2C1_out_write => sobel_Block_Mat_exit49_proc88_U0_C_YR2C1_out_write,
        c_high_thresh_out_din => sobel_Block_Mat_exit49_proc88_U0_c_high_thresh_out_din,
        c_high_thresh_out_full_n => sobel_Block_Mat_exit49_proc88_U0_c_high_thresh_out_full_n,
        c_high_thresh_out_write => sobel_Block_Mat_exit49_proc88_U0_c_high_thresh_out_write,
        C_YR1C1_out_din => sobel_Block_Mat_exit49_proc88_U0_C_YR1C1_out_din,
        C_YR1C1_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_YR1C1_out_full_n,
        C_YR1C1_out_write => sobel_Block_Mat_exit49_proc88_U0_C_YR1C1_out_write,
        C_XR1C2_out_din => sobel_Block_Mat_exit49_proc88_U0_C_XR1C2_out_din,
        C_XR1C2_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_XR1C2_out_full_n,
        C_XR1C2_out_write => sobel_Block_Mat_exit49_proc88_U0_C_XR1C2_out_write,
        C_YR0C1_out_din => sobel_Block_Mat_exit49_proc88_U0_C_YR0C1_out_din,
        C_YR0C1_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_YR0C1_out_full_n,
        C_YR0C1_out_write => sobel_Block_Mat_exit49_proc88_U0_C_YR0C1_out_write,
        C_XR2C2_out_din => sobel_Block_Mat_exit49_proc88_U0_C_XR2C2_out_din,
        C_XR2C2_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_XR2C2_out_full_n,
        C_XR2C2_out_write => sobel_Block_Mat_exit49_proc88_U0_C_XR2C2_out_write,
        C_XR0C0_out_din => sobel_Block_Mat_exit49_proc88_U0_C_XR0C0_out_din,
        C_XR0C0_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_XR0C0_out_full_n,
        C_XR0C0_out_write => sobel_Block_Mat_exit49_proc88_U0_C_XR0C0_out_write,
        C_XR0C1_out_din => sobel_Block_Mat_exit49_proc88_U0_C_XR0C1_out_din,
        C_XR0C1_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_XR0C1_out_full_n,
        C_XR0C1_out_write => sobel_Block_Mat_exit49_proc88_U0_C_XR0C1_out_write,
        C_XR0C2_out_din => sobel_Block_Mat_exit49_proc88_U0_C_XR0C2_out_din,
        C_XR0C2_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_XR0C2_out_full_n,
        C_XR0C2_out_write => sobel_Block_Mat_exit49_proc88_U0_C_XR0C2_out_write,
        C_XR1C0_out_din => sobel_Block_Mat_exit49_proc88_U0_C_XR1C0_out_din,
        C_XR1C0_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_XR1C0_out_full_n,
        C_XR1C0_out_write => sobel_Block_Mat_exit49_proc88_U0_C_XR1C0_out_write,
        C_XR2C1_out_din => sobel_Block_Mat_exit49_proc88_U0_C_XR2C1_out_din,
        C_XR2C1_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_XR2C1_out_full_n,
        C_XR2C1_out_write => sobel_Block_Mat_exit49_proc88_U0_C_XR2C1_out_write,
        C_XR1C1_out_din => sobel_Block_Mat_exit49_proc88_U0_C_XR1C1_out_din,
        C_XR1C1_out_full_n => sobel_Block_Mat_exit49_proc88_U0_C_XR1C1_out_full_n,
        C_XR1C1_out_write => sobel_Block_Mat_exit49_proc88_U0_C_XR1C1_out_write,
        c_low_thresh_out_din => sobel_Block_Mat_exit49_proc88_U0_c_low_thresh_out_din,
        c_low_thresh_out_full_n => sobel_Block_Mat_exit49_proc88_U0_c_low_thresh_out_full_n,
        c_low_thresh_out_write => sobel_Block_Mat_exit49_proc88_U0_c_low_thresh_out_write,
        c_invert_out_din => sobel_Block_Mat_exit49_proc88_U0_c_invert_out_din,
        c_invert_out_full_n => sobel_Block_Mat_exit49_proc88_U0_c_invert_out_full_n,
        c_invert_out_write => sobel_Block_Mat_exit49_proc88_U0_c_invert_out_write,
        p_out_din => sobel_Block_Mat_exit49_proc88_U0_p_out_din,
        p_out_full_n => sobel_Block_Mat_exit49_proc88_U0_p_out_full_n,
        p_out_write => sobel_Block_Mat_exit49_proc88_U0_p_out_write,
        p_out1_din => sobel_Block_Mat_exit49_proc88_U0_p_out1_din,
        p_out1_full_n => sobel_Block_Mat_exit49_proc88_U0_p_out1_full_n,
        p_out1_write => sobel_Block_Mat_exit49_proc88_U0_p_out1_write,
        p_out2_din => sobel_Block_Mat_exit49_proc88_U0_p_out2_din,
        p_out2_full_n => sobel_Block_Mat_exit49_proc88_U0_p_out2_full_n,
        p_out2_write => sobel_Block_Mat_exit49_proc88_U0_p_out2_write,
        ap_return_0 => sobel_Block_Mat_exit49_proc88_U0_ap_return_0,
        ap_return_1 => sobel_Block_Mat_exit49_proc88_U0_ap_return_1,
        ap_return_2 => sobel_Block_Mat_exit49_proc88_U0_ap_return_2,
        ap_return_3 => sobel_Block_Mat_exit49_proc88_U0_ap_return_3);

    sobel_AXIvideo2Mat_24_480_640_32_U0 : component sobel_AXIvideo2Mat_24_480_640_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_AXIvideo2Mat_24_480_640_32_U0_ap_start,
        ap_done => sobel_AXIvideo2Mat_24_480_640_32_U0_ap_done,
        ap_continue => sobel_AXIvideo2Mat_24_480_640_32_U0_ap_continue,
        ap_idle => sobel_AXIvideo2Mat_24_480_640_32_U0_ap_idle,
        ap_ready => sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready,
        video_in_TDATA => sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TDATA,
        video_in_TVALID => sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TVALID,
        video_in_TREADY => sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TREADY,
        video_in_TKEEP => sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TKEEP,
        video_in_TSTRB => sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TSTRB,
        video_in_TUSER => sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TUSER,
        video_in_TLAST => sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TLAST,
        video_in_TID => sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TID,
        video_in_TDEST => sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TDEST,
        img_rows_V_dout => sobel_AXIvideo2Mat_24_480_640_32_U0_img_rows_V_dout,
        img_rows_V_empty_n => sobel_AXIvideo2Mat_24_480_640_32_U0_img_rows_V_empty_n,
        img_rows_V_read => sobel_AXIvideo2Mat_24_480_640_32_U0_img_rows_V_read,
        img_cols_V_dout => sobel_AXIvideo2Mat_24_480_640_32_U0_img_cols_V_dout,
        img_cols_V_empty_n => sobel_AXIvideo2Mat_24_480_640_32_U0_img_cols_V_empty_n,
        img_cols_V_read => sobel_AXIvideo2Mat_24_480_640_32_U0_img_cols_V_read,
        img_data_stream_0_V_din => sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_2_V_write);

    sobel_GaussianBlur_U0 : component sobel_GaussianBlur
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_GaussianBlur_U0_ap_start,
        ap_done => sobel_GaussianBlur_U0_ap_done,
        ap_continue => sobel_GaussianBlur_U0_ap_continue,
        ap_idle => sobel_GaussianBlur_U0_ap_idle,
        ap_ready => sobel_GaussianBlur_U0_ap_ready,
        p_src_rows_V_dout => sobel_GaussianBlur_U0_p_src_rows_V_dout,
        p_src_rows_V_empty_n => sobel_GaussianBlur_U0_p_src_rows_V_empty_n,
        p_src_rows_V_read => sobel_GaussianBlur_U0_p_src_rows_V_read,
        p_src_cols_V_dout => sobel_GaussianBlur_U0_p_src_cols_V_dout,
        p_src_cols_V_empty_n => sobel_GaussianBlur_U0_p_src_cols_V_empty_n,
        p_src_cols_V_read => sobel_GaussianBlur_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => sobel_GaussianBlur_U0_p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n => sobel_GaussianBlur_U0_p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read => sobel_GaussianBlur_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => sobel_GaussianBlur_U0_p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n => sobel_GaussianBlur_U0_p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read => sobel_GaussianBlur_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => sobel_GaussianBlur_U0_p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n => sobel_GaussianBlur_U0_p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read => sobel_GaussianBlur_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => sobel_GaussianBlur_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => sobel_GaussianBlur_U0_p_dst_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write => sobel_GaussianBlur_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => sobel_GaussianBlur_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => sobel_GaussianBlur_U0_p_dst_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write => sobel_GaussianBlur_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => sobel_GaussianBlur_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => sobel_GaussianBlur_U0_p_dst_data_stream_2_V_full_n,
        p_dst_data_stream_2_V_write => sobel_GaussianBlur_U0_p_dst_data_stream_2_V_write);

    sobel_sobel_filter_core_U0 : component sobel_sobel_filter_core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_sobel_filter_core_U0_ap_start,
        ap_done => sobel_sobel_filter_core_U0_ap_done,
        ap_continue => sobel_sobel_filter_core_U0_ap_continue,
        ap_idle => sobel_sobel_filter_core_U0_ap_idle,
        ap_ready => sobel_sobel_filter_core_U0_ap_ready,
        src_data_stream_0_V_dout => sobel_sobel_filter_core_U0_src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n => sobel_sobel_filter_core_U0_src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read => sobel_sobel_filter_core_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => sobel_sobel_filter_core_U0_src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n => sobel_sobel_filter_core_U0_src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read => sobel_sobel_filter_core_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => sobel_sobel_filter_core_U0_src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n => sobel_sobel_filter_core_U0_src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read => sobel_sobel_filter_core_U0_src_data_stream_2_V_read,
        dst_data_stream_V_din => sobel_sobel_filter_core_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => sobel_sobel_filter_core_U0_dst_data_stream_V_full_n,
        dst_data_stream_V_write => sobel_sobel_filter_core_U0_dst_data_stream_V_write,
        rows_dout => sobel_sobel_filter_core_U0_rows_dout,
        rows_empty_n => sobel_sobel_filter_core_U0_rows_empty_n,
        rows_read => sobel_sobel_filter_core_U0_rows_read,
        cols_dout => sobel_sobel_filter_core_U0_cols_dout,
        cols_empty_n => sobel_sobel_filter_core_U0_cols_empty_n,
        cols_read => sobel_sobel_filter_core_U0_cols_read,
        C_XR0C0_dout => sobel_sobel_filter_core_U0_C_XR0C0_dout,
        C_XR0C0_empty_n => sobel_sobel_filter_core_U0_C_XR0C0_empty_n,
        C_XR0C0_read => sobel_sobel_filter_core_U0_C_XR0C0_read,
        C_XR0C1_dout => sobel_sobel_filter_core_U0_C_XR0C1_dout,
        C_XR0C1_empty_n => sobel_sobel_filter_core_U0_C_XR0C1_empty_n,
        C_XR0C1_read => sobel_sobel_filter_core_U0_C_XR0C1_read,
        C_XR0C2_dout => sobel_sobel_filter_core_U0_C_XR0C2_dout,
        C_XR0C2_empty_n => sobel_sobel_filter_core_U0_C_XR0C2_empty_n,
        C_XR0C2_read => sobel_sobel_filter_core_U0_C_XR0C2_read,
        C_XR1C0_dout => sobel_sobel_filter_core_U0_C_XR1C0_dout,
        C_XR1C0_empty_n => sobel_sobel_filter_core_U0_C_XR1C0_empty_n,
        C_XR1C0_read => sobel_sobel_filter_core_U0_C_XR1C0_read,
        C_XR1C1_dout => sobel_sobel_filter_core_U0_C_XR1C1_dout,
        C_XR1C1_empty_n => sobel_sobel_filter_core_U0_C_XR1C1_empty_n,
        C_XR1C1_read => sobel_sobel_filter_core_U0_C_XR1C1_read,
        C_XR1C2_dout => sobel_sobel_filter_core_U0_C_XR1C2_dout,
        C_XR1C2_empty_n => sobel_sobel_filter_core_U0_C_XR1C2_empty_n,
        C_XR1C2_read => sobel_sobel_filter_core_U0_C_XR1C2_read,
        C_XR2C0_dout => sobel_sobel_filter_core_U0_C_XR2C0_dout,
        C_XR2C0_empty_n => sobel_sobel_filter_core_U0_C_XR2C0_empty_n,
        C_XR2C0_read => sobel_sobel_filter_core_U0_C_XR2C0_read,
        C_XR2C1_dout => sobel_sobel_filter_core_U0_C_XR2C1_dout,
        C_XR2C1_empty_n => sobel_sobel_filter_core_U0_C_XR2C1_empty_n,
        C_XR2C1_read => sobel_sobel_filter_core_U0_C_XR2C1_read,
        C_XR2C2_dout => sobel_sobel_filter_core_U0_C_XR2C2_dout,
        C_XR2C2_empty_n => sobel_sobel_filter_core_U0_C_XR2C2_empty_n,
        C_XR2C2_read => sobel_sobel_filter_core_U0_C_XR2C2_read,
        C_YR0C0_dout => sobel_sobel_filter_core_U0_C_YR0C0_dout,
        C_YR0C0_empty_n => sobel_sobel_filter_core_U0_C_YR0C0_empty_n,
        C_YR0C0_read => sobel_sobel_filter_core_U0_C_YR0C0_read,
        C_YR0C1_dout => sobel_sobel_filter_core_U0_C_YR0C1_dout,
        C_YR0C1_empty_n => sobel_sobel_filter_core_U0_C_YR0C1_empty_n,
        C_YR0C1_read => sobel_sobel_filter_core_U0_C_YR0C1_read,
        C_YR0C2_dout => sobel_sobel_filter_core_U0_C_YR0C2_dout,
        C_YR0C2_empty_n => sobel_sobel_filter_core_U0_C_YR0C2_empty_n,
        C_YR0C2_read => sobel_sobel_filter_core_U0_C_YR0C2_read,
        C_YR1C0_dout => sobel_sobel_filter_core_U0_C_YR1C0_dout,
        C_YR1C0_empty_n => sobel_sobel_filter_core_U0_C_YR1C0_empty_n,
        C_YR1C0_read => sobel_sobel_filter_core_U0_C_YR1C0_read,
        C_YR1C1_dout => sobel_sobel_filter_core_U0_C_YR1C1_dout,
        C_YR1C1_empty_n => sobel_sobel_filter_core_U0_C_YR1C1_empty_n,
        C_YR1C1_read => sobel_sobel_filter_core_U0_C_YR1C1_read,
        C_YR1C2_dout => sobel_sobel_filter_core_U0_C_YR1C2_dout,
        C_YR1C2_empty_n => sobel_sobel_filter_core_U0_C_YR1C2_empty_n,
        C_YR1C2_read => sobel_sobel_filter_core_U0_C_YR1C2_read,
        C_YR2C0_dout => sobel_sobel_filter_core_U0_C_YR2C0_dout,
        C_YR2C0_empty_n => sobel_sobel_filter_core_U0_C_YR2C0_empty_n,
        C_YR2C0_read => sobel_sobel_filter_core_U0_C_YR2C0_read,
        C_YR2C1_dout => sobel_sobel_filter_core_U0_C_YR2C1_dout,
        C_YR2C1_empty_n => sobel_sobel_filter_core_U0_C_YR2C1_empty_n,
        C_YR2C1_read => sobel_sobel_filter_core_U0_C_YR2C1_read,
        c_high_thresh_dout => sobel_sobel_filter_core_U0_c_high_thresh_dout,
        c_high_thresh_empty_n => sobel_sobel_filter_core_U0_c_high_thresh_empty_n,
        c_high_thresh_read => sobel_sobel_filter_core_U0_c_high_thresh_read,
        c_low_thresh_dout => sobel_sobel_filter_core_U0_c_low_thresh_dout,
        c_low_thresh_empty_n => sobel_sobel_filter_core_U0_c_low_thresh_empty_n,
        c_low_thresh_read => sobel_sobel_filter_core_U0_c_low_thresh_read,
        c_invert_dout => sobel_sobel_filter_core_U0_c_invert_dout,
        c_invert_empty_n => sobel_sobel_filter_core_U0_c_invert_empty_n,
        c_invert_read => sobel_sobel_filter_core_U0_c_invert_read);

    sobel_Threshold_480_640_0_0_U0 : component sobel_Threshold_480_640_0_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_Threshold_480_640_0_0_U0_ap_start,
        ap_done => sobel_Threshold_480_640_0_0_U0_ap_done,
        ap_continue => sobel_Threshold_480_640_0_0_U0_ap_continue,
        ap_idle => sobel_Threshold_480_640_0_0_U0_ap_idle,
        ap_ready => sobel_Threshold_480_640_0_0_U0_ap_ready,
        src_rows_V_read => sobel_Threshold_480_640_0_0_U0_src_rows_V_read,
        src_cols_V_read => sobel_Threshold_480_640_0_0_U0_src_cols_V_read,
        src_data_stream_V_dout => sobel_Threshold_480_640_0_0_U0_src_data_stream_V_dout,
        src_data_stream_V_empty_n => sobel_Threshold_480_640_0_0_U0_src_data_stream_V_empty_n,
        src_data_stream_V_read => sobel_Threshold_480_640_0_0_U0_src_data_stream_V_read,
        dst_data_stream_V_din => sobel_Threshold_480_640_0_0_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => sobel_Threshold_480_640_0_0_U0_dst_data_stream_V_full_n,
        dst_data_stream_V_write => sobel_Threshold_480_640_0_0_U0_dst_data_stream_V_write,
        thresh_dout => sobel_Threshold_480_640_0_0_U0_thresh_dout,
        thresh_empty_n => sobel_Threshold_480_640_0_0_U0_thresh_empty_n,
        thresh_read => sobel_Threshold_480_640_0_0_U0_thresh_read);

    sobel_Mat2AXIvideo_8_480_640_0_U0 : component sobel_Mat2AXIvideo_8_480_640_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_Mat2AXIvideo_8_480_640_0_U0_ap_start,
        ap_done => sobel_Mat2AXIvideo_8_480_640_0_U0_ap_done,
        ap_continue => sobel_Mat2AXIvideo_8_480_640_0_U0_ap_continue,
        ap_idle => sobel_Mat2AXIvideo_8_480_640_0_U0_ap_idle,
        ap_ready => sobel_Mat2AXIvideo_8_480_640_0_U0_ap_ready,
        img_rows_V_read => sobel_Mat2AXIvideo_8_480_640_0_U0_img_rows_V_read,
        img_cols_V_read => sobel_Mat2AXIvideo_8_480_640_0_U0_img_cols_V_read,
        img_data_stream_V_dout => sobel_Mat2AXIvideo_8_480_640_0_U0_img_data_stream_V_dout,
        img_data_stream_V_empty_n => sobel_Mat2AXIvideo_8_480_640_0_U0_img_data_stream_V_empty_n,
        img_data_stream_V_read => sobel_Mat2AXIvideo_8_480_640_0_U0_img_data_stream_V_read,
        video_out_TDATA => sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TDATA,
        video_out_TVALID => sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TVALID,
        video_out_TREADY => sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TREADY,
        video_out_TKEEP => sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TKEEP,
        video_out_TSTRB => sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TSTRB,
        video_out_TUSER => sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TUSER,
        video_out_TLAST => sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TLAST,
        video_out_TID => sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TID,
        video_out_TDEST => sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TDEST);

    img_0_rows_V_channel_U : component FIFO_sobel_img_0_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => img_0_rows_V_channel_U_ap_dummy_ce,
        if_din => img_0_rows_V_channel_din,
        if_full_n => img_0_rows_V_channel_full_n,
        if_write => img_0_rows_V_channel_write,
        if_dout => img_0_rows_V_channel_dout,
        if_empty_n => img_0_rows_V_channel_empty_n,
        if_read => img_0_rows_V_channel_read);

    img_0_rows_V_channel23_U : component FIFO_sobel_img_0_rows_V_channel23
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_rows_V_channel23_U_ap_dummy_ce,
        if_write_ce => img_0_rows_V_channel23_U_ap_dummy_ce,
        if_din => img_0_rows_V_channel23_din,
        if_full_n => img_0_rows_V_channel23_full_n,
        if_write => img_0_rows_V_channel23_write,
        if_dout => img_0_rows_V_channel23_dout,
        if_empty_n => img_0_rows_V_channel23_empty_n,
        if_read => img_0_rows_V_channel23_read);

    img_0_cols_V_channel_U : component FIFO_sobel_img_0_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => img_0_cols_V_channel_U_ap_dummy_ce,
        if_din => img_0_cols_V_channel_din,
        if_full_n => img_0_cols_V_channel_full_n,
        if_write => img_0_cols_V_channel_write,
        if_dout => img_0_cols_V_channel_dout,
        if_empty_n => img_0_cols_V_channel_empty_n,
        if_read => img_0_cols_V_channel_read);

    img_0_cols_V_channel24_U : component FIFO_sobel_img_0_cols_V_channel24
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_cols_V_channel24_U_ap_dummy_ce,
        if_write_ce => img_0_cols_V_channel24_U_ap_dummy_ce,
        if_din => img_0_cols_V_channel24_din,
        if_full_n => img_0_cols_V_channel24_full_n,
        if_write => img_0_cols_V_channel24_write,
        if_dout => img_0_cols_V_channel24_dout,
        if_empty_n => img_0_cols_V_channel24_empty_n,
        if_read => img_0_cols_V_channel24_read);

    C_XR2C0_channel_U : component FIFO_sobel_C_XR2C0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_XR2C0_channel_U_ap_dummy_ce,
        if_write_ce => C_XR2C0_channel_U_ap_dummy_ce,
        if_din => C_XR2C0_channel_din,
        if_full_n => C_XR2C0_channel_full_n,
        if_write => C_XR2C0_channel_write,
        if_dout => C_XR2C0_channel_dout,
        if_empty_n => C_XR2C0_channel_empty_n,
        if_read => C_XR2C0_channel_read);

    C_YR0C0_channel_U : component FIFO_sobel_C_YR0C0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_YR0C0_channel_U_ap_dummy_ce,
        if_write_ce => C_YR0C0_channel_U_ap_dummy_ce,
        if_din => C_YR0C0_channel_din,
        if_full_n => C_YR0C0_channel_full_n,
        if_write => C_YR0C0_channel_write,
        if_dout => C_YR0C0_channel_dout,
        if_empty_n => C_YR0C0_channel_empty_n,
        if_read => C_YR0C0_channel_read);

    C_YR0C2_channel_U : component FIFO_sobel_C_YR0C2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_YR0C2_channel_U_ap_dummy_ce,
        if_write_ce => C_YR0C2_channel_U_ap_dummy_ce,
        if_din => C_YR0C2_channel_din,
        if_full_n => C_YR0C2_channel_full_n,
        if_write => C_YR0C2_channel_write,
        if_dout => C_YR0C2_channel_dout,
        if_empty_n => C_YR0C2_channel_empty_n,
        if_read => C_YR0C2_channel_read);

    C_YR1C0_channel_U : component FIFO_sobel_C_YR1C0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_YR1C0_channel_U_ap_dummy_ce,
        if_write_ce => C_YR1C0_channel_U_ap_dummy_ce,
        if_din => C_YR1C0_channel_din,
        if_full_n => C_YR1C0_channel_full_n,
        if_write => C_YR1C0_channel_write,
        if_dout => C_YR1C0_channel_dout,
        if_empty_n => C_YR1C0_channel_empty_n,
        if_read => C_YR1C0_channel_read);

    C_YR1C2_channel_U : component FIFO_sobel_C_YR1C2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_YR1C2_channel_U_ap_dummy_ce,
        if_write_ce => C_YR1C2_channel_U_ap_dummy_ce,
        if_din => C_YR1C2_channel_din,
        if_full_n => C_YR1C2_channel_full_n,
        if_write => C_YR1C2_channel_write,
        if_dout => C_YR1C2_channel_dout,
        if_empty_n => C_YR1C2_channel_empty_n,
        if_read => C_YR1C2_channel_read);

    C_YR2C0_channel_U : component FIFO_sobel_C_YR2C0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_YR2C0_channel_U_ap_dummy_ce,
        if_write_ce => C_YR2C0_channel_U_ap_dummy_ce,
        if_din => C_YR2C0_channel_din,
        if_full_n => C_YR2C0_channel_full_n,
        if_write => C_YR2C0_channel_write,
        if_dout => C_YR2C0_channel_dout,
        if_empty_n => C_YR2C0_channel_empty_n,
        if_read => C_YR2C0_channel_read);

    C_YR2C1_channel_U : component FIFO_sobel_C_YR2C1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_YR2C1_channel_U_ap_dummy_ce,
        if_write_ce => C_YR2C1_channel_U_ap_dummy_ce,
        if_din => C_YR2C1_channel_din,
        if_full_n => C_YR2C1_channel_full_n,
        if_write => C_YR2C1_channel_write,
        if_dout => C_YR2C1_channel_dout,
        if_empty_n => C_YR2C1_channel_empty_n,
        if_read => C_YR2C1_channel_read);

    c_high_thresh_channel_U : component FIFO_sobel_c_high_thresh_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => c_high_thresh_channel_U_ap_dummy_ce,
        if_write_ce => c_high_thresh_channel_U_ap_dummy_ce,
        if_din => c_high_thresh_channel_din,
        if_full_n => c_high_thresh_channel_full_n,
        if_write => c_high_thresh_channel_write,
        if_dout => c_high_thresh_channel_dout,
        if_empty_n => c_high_thresh_channel_empty_n,
        if_read => c_high_thresh_channel_read);

    C_YR1C1_channel_U : component FIFO_sobel_C_YR1C1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_YR1C1_channel_U_ap_dummy_ce,
        if_write_ce => C_YR1C1_channel_U_ap_dummy_ce,
        if_din => C_YR1C1_channel_din,
        if_full_n => C_YR1C1_channel_full_n,
        if_write => C_YR1C1_channel_write,
        if_dout => C_YR1C1_channel_dout,
        if_empty_n => C_YR1C1_channel_empty_n,
        if_read => C_YR1C1_channel_read);

    C_XR1C2_channel_U : component FIFO_sobel_C_XR1C2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_XR1C2_channel_U_ap_dummy_ce,
        if_write_ce => C_XR1C2_channel_U_ap_dummy_ce,
        if_din => C_XR1C2_channel_din,
        if_full_n => C_XR1C2_channel_full_n,
        if_write => C_XR1C2_channel_write,
        if_dout => C_XR1C2_channel_dout,
        if_empty_n => C_XR1C2_channel_empty_n,
        if_read => C_XR1C2_channel_read);

    C_YR0C1_channel_U : component FIFO_sobel_C_YR0C1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_YR0C1_channel_U_ap_dummy_ce,
        if_write_ce => C_YR0C1_channel_U_ap_dummy_ce,
        if_din => C_YR0C1_channel_din,
        if_full_n => C_YR0C1_channel_full_n,
        if_write => C_YR0C1_channel_write,
        if_dout => C_YR0C1_channel_dout,
        if_empty_n => C_YR0C1_channel_empty_n,
        if_read => C_YR0C1_channel_read);

    C_XR2C2_channel_U : component FIFO_sobel_C_XR2C2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_XR2C2_channel_U_ap_dummy_ce,
        if_write_ce => C_XR2C2_channel_U_ap_dummy_ce,
        if_din => C_XR2C2_channel_din,
        if_full_n => C_XR2C2_channel_full_n,
        if_write => C_XR2C2_channel_write,
        if_dout => C_XR2C2_channel_dout,
        if_empty_n => C_XR2C2_channel_empty_n,
        if_read => C_XR2C2_channel_read);

    C_XR0C0_channel_U : component FIFO_sobel_C_XR0C0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_XR0C0_channel_U_ap_dummy_ce,
        if_write_ce => C_XR0C0_channel_U_ap_dummy_ce,
        if_din => C_XR0C0_channel_din,
        if_full_n => C_XR0C0_channel_full_n,
        if_write => C_XR0C0_channel_write,
        if_dout => C_XR0C0_channel_dout,
        if_empty_n => C_XR0C0_channel_empty_n,
        if_read => C_XR0C0_channel_read);

    C_XR0C1_channel_U : component FIFO_sobel_C_XR0C1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_XR0C1_channel_U_ap_dummy_ce,
        if_write_ce => C_XR0C1_channel_U_ap_dummy_ce,
        if_din => C_XR0C1_channel_din,
        if_full_n => C_XR0C1_channel_full_n,
        if_write => C_XR0C1_channel_write,
        if_dout => C_XR0C1_channel_dout,
        if_empty_n => C_XR0C1_channel_empty_n,
        if_read => C_XR0C1_channel_read);

    C_XR0C2_channel_U : component FIFO_sobel_C_XR0C2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_XR0C2_channel_U_ap_dummy_ce,
        if_write_ce => C_XR0C2_channel_U_ap_dummy_ce,
        if_din => C_XR0C2_channel_din,
        if_full_n => C_XR0C2_channel_full_n,
        if_write => C_XR0C2_channel_write,
        if_dout => C_XR0C2_channel_dout,
        if_empty_n => C_XR0C2_channel_empty_n,
        if_read => C_XR0C2_channel_read);

    C_XR1C0_channel_U : component FIFO_sobel_C_XR1C0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_XR1C0_channel_U_ap_dummy_ce,
        if_write_ce => C_XR1C0_channel_U_ap_dummy_ce,
        if_din => C_XR1C0_channel_din,
        if_full_n => C_XR1C0_channel_full_n,
        if_write => C_XR1C0_channel_write,
        if_dout => C_XR1C0_channel_dout,
        if_empty_n => C_XR1C0_channel_empty_n,
        if_read => C_XR1C0_channel_read);

    C_XR2C1_channel_U : component FIFO_sobel_C_XR2C1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_XR2C1_channel_U_ap_dummy_ce,
        if_write_ce => C_XR2C1_channel_U_ap_dummy_ce,
        if_din => C_XR2C1_channel_din,
        if_full_n => C_XR2C1_channel_full_n,
        if_write => C_XR2C1_channel_write,
        if_dout => C_XR2C1_channel_dout,
        if_empty_n => C_XR2C1_channel_empty_n,
        if_read => C_XR2C1_channel_read);

    C_XR1C1_channel_U : component FIFO_sobel_C_XR1C1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => C_XR1C1_channel_U_ap_dummy_ce,
        if_write_ce => C_XR1C1_channel_U_ap_dummy_ce,
        if_din => C_XR1C1_channel_din,
        if_full_n => C_XR1C1_channel_full_n,
        if_write => C_XR1C1_channel_write,
        if_dout => C_XR1C1_channel_dout,
        if_empty_n => C_XR1C1_channel_empty_n,
        if_read => C_XR1C1_channel_read);

    c_low_thresh_channel_U : component FIFO_sobel_c_low_thresh_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => c_low_thresh_channel_U_ap_dummy_ce,
        if_write_ce => c_low_thresh_channel_U_ap_dummy_ce,
        if_din => c_low_thresh_channel_din,
        if_full_n => c_low_thresh_channel_full_n,
        if_write => c_low_thresh_channel_write,
        if_dout => c_low_thresh_channel_dout,
        if_empty_n => c_low_thresh_channel_empty_n,
        if_read => c_low_thresh_channel_read);

    c_invert_channel_U : component FIFO_sobel_c_invert_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => c_invert_channel_U_ap_dummy_ce,
        if_write_ce => c_invert_channel_U_ap_dummy_ce,
        if_din => c_invert_channel_din,
        if_full_n => c_invert_channel_full_n,
        if_write => c_invert_channel_write,
        if_dout => c_invert_channel_dout,
        if_empty_n => c_invert_channel_empty_n,
        if_read => c_invert_channel_read);

    p_channel_U : component FIFO_sobel_p_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_channel_U_ap_dummy_ce,
        if_write_ce => p_channel_U_ap_dummy_ce,
        if_din => p_channel_din,
        if_full_n => p_channel_full_n,
        if_write => p_channel_write,
        if_dout => p_channel_dout,
        if_empty_n => p_channel_empty_n,
        if_read => p_channel_read);

    p_channel25_U : component FIFO_sobel_p_channel25
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_channel25_U_ap_dummy_ce,
        if_write_ce => p_channel25_U_ap_dummy_ce,
        if_din => p_channel25_din,
        if_full_n => p_channel25_full_n,
        if_write => p_channel25_write,
        if_dout => p_channel25_dout,
        if_empty_n => p_channel25_empty_n,
        if_read => p_channel25_read);

    p_channel26_U : component FIFO_sobel_p_channel26
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => p_channel26_U_ap_dummy_ce,
        if_write_ce => p_channel26_U_ap_dummy_ce,
        if_din => p_channel26_din,
        if_full_n => p_channel26_full_n,
        if_write => p_channel26_write,
        if_dout => p_channel26_dout,
        if_empty_n => p_channel26_empty_n,
        if_read => p_channel26_read);

    img_2_rows_V_channel_U : component FIFO_sobel_img_2_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_2_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => img_2_rows_V_channel_U_ap_dummy_ce,
        if_din => img_2_rows_V_channel_din,
        if_full_n => img_2_rows_V_channel_full_n,
        if_write => img_2_rows_V_channel_write,
        if_dout => img_2_rows_V_channel_dout,
        if_empty_n => img_2_rows_V_channel_empty_n,
        if_read => img_2_rows_V_channel_read);

    img_2_cols_V_channel_U : component FIFO_sobel_img_2_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_2_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => img_2_cols_V_channel_U_ap_dummy_ce,
        if_din => img_2_cols_V_channel_din,
        if_full_n => img_2_cols_V_channel_full_n,
        if_write => img_2_cols_V_channel_write,
        if_dout => img_2_cols_V_channel_dout,
        if_empty_n => img_2_cols_V_channel_empty_n,
        if_read => img_2_cols_V_channel_read);

    img_3_rows_V_channel_U : component FIFO_sobel_img_3_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_3_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => img_3_rows_V_channel_U_ap_dummy_ce,
        if_din => img_3_rows_V_channel_din,
        if_full_n => img_3_rows_V_channel_full_n,
        if_write => img_3_rows_V_channel_write,
        if_dout => img_3_rows_V_channel_dout,
        if_empty_n => img_3_rows_V_channel_empty_n,
        if_read => img_3_rows_V_channel_read);

    img_3_cols_V_channel_U : component FIFO_sobel_img_3_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_3_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => img_3_cols_V_channel_U_ap_dummy_ce,
        if_din => img_3_cols_V_channel_din,
        if_full_n => img_3_cols_V_channel_full_n,
        if_write => img_3_cols_V_channel_write,
        if_dout => img_3_cols_V_channel_dout,
        if_empty_n => img_3_cols_V_channel_empty_n,
        if_read => img_3_cols_V_channel_read);

    img_0_data_stream_0_V_U : component FIFO_sobel_img_0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_0_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_V_full_n,
        if_write => img_0_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_V_dout,
        if_empty_n => img_0_data_stream_0_V_empty_n,
        if_read => img_0_data_stream_0_V_read);

    img_0_data_stream_1_V_U : component FIFO_sobel_img_0_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_data_stream_1_V_U_ap_dummy_ce,
        if_write_ce => img_0_data_stream_1_V_U_ap_dummy_ce,
        if_din => img_0_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_V_full_n,
        if_write => img_0_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_V_dout,
        if_empty_n => img_0_data_stream_1_V_empty_n,
        if_read => img_0_data_stream_1_V_read);

    img_0_data_stream_2_V_U : component FIFO_sobel_img_0_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_data_stream_2_V_U_ap_dummy_ce,
        if_write_ce => img_0_data_stream_2_V_U_ap_dummy_ce,
        if_din => img_0_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_V_full_n,
        if_write => img_0_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_V_dout,
        if_empty_n => img_0_data_stream_2_V_empty_n,
        if_read => img_0_data_stream_2_V_read);

    img_1_data_stream_0_V_U : component FIFO_sobel_img_1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_1_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_V_full_n,
        if_write => img_1_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_dout,
        if_empty_n => img_1_data_stream_0_V_empty_n,
        if_read => img_1_data_stream_0_V_read);

    img_1_data_stream_1_V_U : component FIFO_sobel_img_1_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_1_data_stream_1_V_U_ap_dummy_ce,
        if_write_ce => img_1_data_stream_1_V_U_ap_dummy_ce,
        if_din => img_1_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_V_full_n,
        if_write => img_1_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_V_dout,
        if_empty_n => img_1_data_stream_1_V_empty_n,
        if_read => img_1_data_stream_1_V_read);

    img_1_data_stream_2_V_U : component FIFO_sobel_img_1_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_1_data_stream_2_V_U_ap_dummy_ce,
        if_write_ce => img_1_data_stream_2_V_U_ap_dummy_ce,
        if_din => img_1_data_stream_2_V_din,
        if_full_n => img_1_data_stream_2_V_full_n,
        if_write => img_1_data_stream_2_V_write,
        if_dout => img_1_data_stream_2_V_dout,
        if_empty_n => img_1_data_stream_2_V_empty_n,
        if_read => img_1_data_stream_2_V_read);

    img_2_data_stream_0_V_U : component FIFO_sobel_img_2_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_2_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_2_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_2_data_stream_0_V_din,
        if_full_n => img_2_data_stream_0_V_full_n,
        if_write => img_2_data_stream_0_V_write,
        if_dout => img_2_data_stream_0_V_dout,
        if_empty_n => img_2_data_stream_0_V_empty_n,
        if_read => img_2_data_stream_0_V_read);

    img_3_data_stream_0_V_U : component FIFO_sobel_img_3_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_3_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_3_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_3_data_stream_0_V_din,
        if_full_n => img_3_data_stream_0_V_full_n,
        if_write => img_3_data_stream_0_V_write,
        if_dout => img_3_data_stream_0_V_dout,
        if_empty_n => img_3_data_stream_0_V_empty_n,
        if_read => img_3_data_stream_0_V_read);





    -- ap_reg_procdone_sobel_AXIvideo2Mat_24_480_640_32_U0 assign process. --
    ap_reg_procdone_sobel_AXIvideo2Mat_24_480_640_32_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_sobel_AXIvideo2Mat_24_480_640_32_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_sobel_AXIvideo2Mat_24_480_640_32_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = sobel_AXIvideo2Mat_24_480_640_32_U0_ap_done)) then 
                    ap_reg_procdone_sobel_AXIvideo2Mat_24_480_640_32_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_sobel_Block_Mat_exit49_proc88_U0 assign process. --
    ap_reg_procdone_sobel_Block_Mat_exit49_proc88_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_sobel_Block_Mat_exit49_proc88_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_sobel_Block_Mat_exit49_proc88_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_done)) then 
                    ap_reg_procdone_sobel_Block_Mat_exit49_proc88_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_sobel_GaussianBlur_U0 assign process. --
    ap_reg_procdone_sobel_GaussianBlur_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_sobel_GaussianBlur_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_sobel_GaussianBlur_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = sobel_GaussianBlur_U0_ap_done)) then 
                    ap_reg_procdone_sobel_GaussianBlur_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_sobel_Mat2AXIvideo_8_480_640_0_U0 assign process. --
    ap_reg_procdone_sobel_Mat2AXIvideo_8_480_640_0_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_sobel_Mat2AXIvideo_8_480_640_0_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_sobel_Mat2AXIvideo_8_480_640_0_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = sobel_Mat2AXIvideo_8_480_640_0_U0_ap_done)) then 
                    ap_reg_procdone_sobel_Mat2AXIvideo_8_480_640_0_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_sobel_Threshold_480_640_0_0_U0 assign process. --
    ap_reg_procdone_sobel_Threshold_480_640_0_0_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_sobel_Threshold_480_640_0_0_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_sobel_Threshold_480_640_0_0_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = sobel_Threshold_480_640_0_0_U0_ap_done)) then 
                    ap_reg_procdone_sobel_Threshold_480_640_0_0_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_sobel_sobel_filter_core_U0 assign process. --
    ap_reg_procdone_sobel_sobel_filter_core_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_sobel_sobel_filter_core_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_sobel_sobel_filter_core_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = sobel_sobel_filter_core_U0_ap_done)) then 
                    ap_reg_procdone_sobel_sobel_filter_core_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_2_cols_V_channel_full_n assign process. --
    ap_reg_ready_img_2_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_img_2_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_done) and (ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_continue))) then 
                    ap_reg_ready_img_2_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_done) and (ap_const_logic_1 = img_2_cols_V_channel_full_n))) then 
                    ap_reg_ready_img_2_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_2_rows_V_channel_full_n assign process. --
    ap_reg_ready_img_2_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_img_2_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_done) and (ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_continue))) then 
                    ap_reg_ready_img_2_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_done) and (ap_const_logic_1 = img_2_rows_V_channel_full_n))) then 
                    ap_reg_ready_img_2_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_3_cols_V_channel_full_n assign process. --
    ap_reg_ready_img_3_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_img_3_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_done) and (ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_continue))) then 
                    ap_reg_ready_img_3_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_done) and (ap_const_logic_1 = img_3_cols_V_channel_full_n))) then 
                    ap_reg_ready_img_3_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_3_rows_V_channel_full_n assign process. --
    ap_reg_ready_img_3_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_img_3_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_done) and (ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_continue))) then 
                    ap_reg_ready_img_3_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_done) and (ap_const_logic_1 = img_3_rows_V_channel_full_n))) then 
                    ap_reg_ready_img_3_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready assign process. --
    ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready)) then 
                    ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready assign process. --
    ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_ready)) then 
                    ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- sobel_GaussianBlur_U0_ap_start assign process. --
    sobel_GaussianBlur_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sobel_GaussianBlur_U0_ap_start <= ap_const_logic_0;
            else
                sobel_GaussianBlur_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- sobel_sobel_filter_core_U0_ap_start assign process. --
    sobel_sobel_filter_core_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sobel_sobel_filter_core_U0_ap_start <= ap_const_logic_0;
            else
                sobel_sobel_filter_core_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    C_XR0C0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_XR0C0_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_XR0C0_out_din;
    C_XR0C0_channel_read <= sobel_sobel_filter_core_U0_C_XR0C0_read;
    C_XR0C0_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_XR0C0_out_write;
    C_XR0C1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_XR0C1_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_XR0C1_out_din;
    C_XR0C1_channel_read <= sobel_sobel_filter_core_U0_C_XR0C1_read;
    C_XR0C1_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_XR0C1_out_write;
    C_XR0C2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_XR0C2_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_XR0C2_out_din;
    C_XR0C2_channel_read <= sobel_sobel_filter_core_U0_C_XR0C2_read;
    C_XR0C2_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_XR0C2_out_write;
    C_XR1C0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_XR1C0_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_XR1C0_out_din;
    C_XR1C0_channel_read <= sobel_sobel_filter_core_U0_C_XR1C0_read;
    C_XR1C0_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_XR1C0_out_write;
    C_XR1C1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_XR1C1_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_XR1C1_out_din;
    C_XR1C1_channel_read <= sobel_sobel_filter_core_U0_C_XR1C1_read;
    C_XR1C1_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_XR1C1_out_write;
    C_XR1C2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_XR1C2_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_XR1C2_out_din;
    C_XR1C2_channel_read <= sobel_sobel_filter_core_U0_C_XR1C2_read;
    C_XR1C2_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_XR1C2_out_write;
    C_XR2C0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_XR2C0_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_XR2C0_out_din;
    C_XR2C0_channel_read <= sobel_sobel_filter_core_U0_C_XR2C0_read;
    C_XR2C0_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_XR2C0_out_write;
    C_XR2C1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_XR2C1_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_XR2C1_out_din;
    C_XR2C1_channel_read <= sobel_sobel_filter_core_U0_C_XR2C1_read;
    C_XR2C1_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_XR2C1_out_write;
    C_XR2C2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_XR2C2_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_XR2C2_out_din;
    C_XR2C2_channel_read <= sobel_sobel_filter_core_U0_C_XR2C2_read;
    C_XR2C2_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_XR2C2_out_write;
    C_YR0C0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_YR0C0_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_YR0C0_out_din;
    C_YR0C0_channel_read <= sobel_sobel_filter_core_U0_C_YR0C0_read;
    C_YR0C0_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_YR0C0_out_write;
    C_YR0C1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_YR0C1_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_YR0C1_out_din;
    C_YR0C1_channel_read <= sobel_sobel_filter_core_U0_C_YR0C1_read;
    C_YR0C1_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_YR0C1_out_write;
    C_YR0C2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_YR0C2_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_YR0C2_out_din;
    C_YR0C2_channel_read <= sobel_sobel_filter_core_U0_C_YR0C2_read;
    C_YR0C2_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_YR0C2_out_write;
    C_YR1C0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_YR1C0_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_YR1C0_out_din;
    C_YR1C0_channel_read <= sobel_sobel_filter_core_U0_C_YR1C0_read;
    C_YR1C0_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_YR1C0_out_write;
    C_YR1C1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_YR1C1_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_YR1C1_out_din;
    C_YR1C1_channel_read <= sobel_sobel_filter_core_U0_C_YR1C1_read;
    C_YR1C1_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_YR1C1_out_write;
    C_YR1C2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_YR1C2_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_YR1C2_out_din;
    C_YR1C2_channel_read <= sobel_sobel_filter_core_U0_C_YR1C2_read;
    C_YR1C2_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_YR1C2_out_write;
    C_YR2C0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_YR2C0_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_YR2C0_out_din;
    C_YR2C0_channel_read <= sobel_sobel_filter_core_U0_C_YR2C0_read;
    C_YR2C0_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_YR2C0_out_write;
    C_YR2C1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    C_YR2C1_channel_din <= sobel_Block_Mat_exit49_proc88_U0_C_YR2C1_out_din;
    C_YR2C1_channel_read <= sobel_sobel_filter_core_U0_C_YR2C1_read;
    C_YR2C1_channel_write <= sobel_Block_Mat_exit49_proc88_U0_C_YR2C1_out_write;

    -- ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_cols_V_channel assign process. --
    ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_cols_V_channel_assign_proc : process(sobel_Block_Mat_exit49_proc88_U0_ap_done, ap_reg_ready_img_2_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_2_cols_V_channel_full_n)) then 
            ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_cols_V_channel <= sobel_Block_Mat_exit49_proc88_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_rows_V_channel assign process. --
    ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_rows_V_channel_assign_proc : process(sobel_Block_Mat_exit49_proc88_U0_ap_done, ap_reg_ready_img_2_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_2_rows_V_channel_full_n)) then 
            ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_rows_V_channel <= sobel_Block_Mat_exit49_proc88_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_cols_V_channel assign process. --
    ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_cols_V_channel_assign_proc : process(sobel_Block_Mat_exit49_proc88_U0_ap_done, ap_reg_ready_img_3_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_3_cols_V_channel_full_n)) then 
            ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_cols_V_channel <= sobel_Block_Mat_exit49_proc88_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_rows_V_channel assign process. --
    ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_rows_V_channel_assign_proc : process(sobel_Block_Mat_exit49_proc88_U0_ap_done, ap_reg_ready_img_3_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_3_rows_V_channel_full_n)) then 
            ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_rows_V_channel <= sobel_Block_Mat_exit49_proc88_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(sobel_Block_Mat_exit49_proc88_U0_ap_idle, sobel_AXIvideo2Mat_24_480_640_32_U0_ap_idle, sobel_GaussianBlur_U0_ap_idle, sobel_sobel_filter_core_U0_ap_idle, sobel_Threshold_480_640_0_0_U0_ap_idle, sobel_Mat2AXIvideo_8_480_640_0_U0_ap_idle, img_2_rows_V_channel_empty_n, img_2_cols_V_channel_empty_n, img_3_rows_V_channel_empty_n, img_3_cols_V_channel_empty_n)
    begin
        if (((ap_const_logic_1 = sobel_Block_Mat_exit49_proc88_U0_ap_idle) and (ap_const_logic_1 = sobel_AXIvideo2Mat_24_480_640_32_U0_ap_idle) and (ap_const_logic_1 = sobel_GaussianBlur_U0_ap_idle) and (ap_const_logic_1 = sobel_sobel_filter_core_U0_ap_idle) and (ap_const_logic_1 = sobel_Threshold_480_640_0_0_U0_ap_idle) and (ap_const_logic_1 = sobel_Mat2AXIvideo_8_480_640_0_U0_ap_idle) and (ap_const_logic_0 = img_2_rows_V_channel_empty_n) and (ap_const_logic_0 = img_2_cols_V_channel_empty_n) and (ap_const_logic_0 = img_3_rows_V_channel_empty_n) and (ap_const_logic_0 = img_3_cols_V_channel_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(sobel_Mat2AXIvideo_8_480_640_0_U0_ap_done)
    begin
        if ((ap_const_logic_1 = sobel_Mat2AXIvideo_8_480_640_0_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_img_2_cols_V_channel_full_n assign process. --
    ap_sig_ready_img_2_cols_V_channel_full_n_assign_proc : process(img_2_cols_V_channel_full_n, ap_reg_ready_img_2_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_2_cols_V_channel_full_n)) then 
            ap_sig_ready_img_2_cols_V_channel_full_n <= img_2_cols_V_channel_full_n;
        else 
            ap_sig_ready_img_2_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_2_rows_V_channel_full_n assign process. --
    ap_sig_ready_img_2_rows_V_channel_full_n_assign_proc : process(img_2_rows_V_channel_full_n, ap_reg_ready_img_2_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_2_rows_V_channel_full_n)) then 
            ap_sig_ready_img_2_rows_V_channel_full_n <= img_2_rows_V_channel_full_n;
        else 
            ap_sig_ready_img_2_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_3_cols_V_channel_full_n assign process. --
    ap_sig_ready_img_3_cols_V_channel_full_n_assign_proc : process(img_3_cols_V_channel_full_n, ap_reg_ready_img_3_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_3_cols_V_channel_full_n)) then 
            ap_sig_ready_img_3_cols_V_channel_full_n <= img_3_cols_V_channel_full_n;
        else 
            ap_sig_ready_img_3_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_3_rows_V_channel_full_n assign process. --
    ap_sig_ready_img_3_rows_V_channel_full_n_assign_proc : process(img_3_rows_V_channel_full_n, ap_reg_ready_img_3_rows_V_channel_full_n)
    begin
        if ((ap_reg_ready_img_3_rows_V_channel_full_n = ap_const_logic_0)) then 
            ap_sig_ready_img_3_rows_V_channel_full_n <= img_3_rows_V_channel_full_n;
        else 
            ap_sig_ready_img_3_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready assign process. --
    ap_sig_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready_assign_proc : process(sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready, ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready)) then 
            ap_sig_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready <= sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready;
        else 
            ap_sig_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready assign process. --
    ap_sig_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready_assign_proc : process(sobel_Block_Mat_exit49_proc88_U0_ap_ready, ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready)) then 
            ap_sig_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready <= sobel_Block_Mat_exit49_proc88_U0_ap_ready;
        else 
            ap_sig_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_start assign process. --
    ap_sig_start_in_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_sobel_Block_Mat_exit49_proc88_U0_ap_start assign process. --
    ap_sig_start_in_sobel_Block_Mat_exit49_proc88_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready))) then 
            ap_sig_start_in_sobel_Block_Mat_exit49_proc88_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_sobel_Block_Mat_exit49_proc88_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready, ap_sig_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_sobel_Block_Mat_exit49_proc88_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

    c_high_thresh_channel_U_ap_dummy_ce <= ap_const_logic_1;
    c_high_thresh_channel_din <= sobel_Block_Mat_exit49_proc88_U0_c_high_thresh_out_din;
    c_high_thresh_channel_read <= sobel_sobel_filter_core_U0_c_high_thresh_read;
    c_high_thresh_channel_write <= sobel_Block_Mat_exit49_proc88_U0_c_high_thresh_out_write;
    c_invert_channel_U_ap_dummy_ce <= ap_const_logic_1;
    c_invert_channel_din <= sobel_Block_Mat_exit49_proc88_U0_c_invert_out_din;
    c_invert_channel_read <= sobel_sobel_filter_core_U0_c_invert_read;
    c_invert_channel_write <= sobel_Block_Mat_exit49_proc88_U0_c_invert_out_write;
    c_low_thresh_channel_U_ap_dummy_ce <= ap_const_logic_1;
    c_low_thresh_channel_din <= sobel_Block_Mat_exit49_proc88_U0_c_low_thresh_out_din;
    c_low_thresh_channel_read <= sobel_sobel_filter_core_U0_c_low_thresh_read;
    c_low_thresh_channel_write <= sobel_Block_Mat_exit49_proc88_U0_c_low_thresh_out_write;
    img_0_cols_V_channel24_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel24_din <= sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out2_din;
    img_0_cols_V_channel24_read <= sobel_GaussianBlur_U0_p_src_cols_V_read;
    img_0_cols_V_channel24_write <= sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out2_write;
    img_0_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel_din <= sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out_din;
    img_0_cols_V_channel_read <= sobel_AXIvideo2Mat_24_480_640_32_U0_img_cols_V_read;
    img_0_cols_V_channel_write <= sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out_write;
    img_0_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_0_V_din <= sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_0_V_din;
    img_0_data_stream_0_V_read <= sobel_GaussianBlur_U0_p_src_data_stream_0_V_read;
    img_0_data_stream_0_V_write <= sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_0_V_write;
    img_0_data_stream_1_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_1_V_din <= sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_1_V_din;
    img_0_data_stream_1_V_read <= sobel_GaussianBlur_U0_p_src_data_stream_1_V_read;
    img_0_data_stream_1_V_write <= sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_1_V_write;
    img_0_data_stream_2_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_2_V_din <= sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_2_V_din;
    img_0_data_stream_2_V_read <= sobel_GaussianBlur_U0_p_src_data_stream_2_V_read;
    img_0_data_stream_2_V_write <= sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_2_V_write;
    img_0_rows_V_channel23_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_rows_V_channel23_din <= sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out1_din;
    img_0_rows_V_channel23_read <= sobel_GaussianBlur_U0_p_src_rows_V_read;
    img_0_rows_V_channel23_write <= sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out1_write;
    img_0_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_rows_V_channel_din <= sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out_din;
    img_0_rows_V_channel_read <= sobel_AXIvideo2Mat_24_480_640_32_U0_img_rows_V_read;
    img_0_rows_V_channel_write <= sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out_write;
    img_1_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_0_V_din <= sobel_GaussianBlur_U0_p_dst_data_stream_0_V_din;
    img_1_data_stream_0_V_read <= sobel_sobel_filter_core_U0_src_data_stream_0_V_read;
    img_1_data_stream_0_V_write <= sobel_GaussianBlur_U0_p_dst_data_stream_0_V_write;
    img_1_data_stream_1_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_1_V_din <= sobel_GaussianBlur_U0_p_dst_data_stream_1_V_din;
    img_1_data_stream_1_V_read <= sobel_sobel_filter_core_U0_src_data_stream_1_V_read;
    img_1_data_stream_1_V_write <= sobel_GaussianBlur_U0_p_dst_data_stream_1_V_write;
    img_1_data_stream_2_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_2_V_din <= sobel_GaussianBlur_U0_p_dst_data_stream_2_V_din;
    img_1_data_stream_2_V_read <= sobel_sobel_filter_core_U0_src_data_stream_2_V_read;
    img_1_data_stream_2_V_write <= sobel_GaussianBlur_U0_p_dst_data_stream_2_V_write;
    img_2_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_2_cols_V_channel_din <= sobel_Block_Mat_exit49_proc88_U0_ap_return_1;
    img_2_cols_V_channel_read <= sobel_Threshold_480_640_0_0_U0_ap_ready;
    img_2_cols_V_channel_write <= ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_cols_V_channel;
    img_2_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_2_data_stream_0_V_din <= sobel_sobel_filter_core_U0_dst_data_stream_V_din;
    img_2_data_stream_0_V_read <= sobel_Threshold_480_640_0_0_U0_src_data_stream_V_read;
    img_2_data_stream_0_V_write <= sobel_sobel_filter_core_U0_dst_data_stream_V_write;
    img_2_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_2_rows_V_channel_din <= sobel_Block_Mat_exit49_proc88_U0_ap_return_0;
    img_2_rows_V_channel_read <= sobel_Threshold_480_640_0_0_U0_ap_ready;
    img_2_rows_V_channel_write <= ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_2_rows_V_channel;
    img_3_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_3_cols_V_channel_din <= sobel_Block_Mat_exit49_proc88_U0_ap_return_3;
    img_3_cols_V_channel_read <= sobel_Mat2AXIvideo_8_480_640_0_U0_ap_ready;
    img_3_cols_V_channel_write <= ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_cols_V_channel;
    img_3_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_3_data_stream_0_V_din <= sobel_Threshold_480_640_0_0_U0_dst_data_stream_V_din;
    img_3_data_stream_0_V_read <= sobel_Mat2AXIvideo_8_480_640_0_U0_img_data_stream_V_read;
    img_3_data_stream_0_V_write <= sobel_Threshold_480_640_0_0_U0_dst_data_stream_V_write;
    img_3_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_3_rows_V_channel_din <= sobel_Block_Mat_exit49_proc88_U0_ap_return_2;
    img_3_rows_V_channel_read <= sobel_Mat2AXIvideo_8_480_640_0_U0_ap_ready;
    img_3_rows_V_channel_write <= ap_chn_write_sobel_Block_Mat_exit49_proc88_U0_img_3_rows_V_channel;
    p_channel25_U_ap_dummy_ce <= ap_const_logic_1;
    p_channel25_din <= sobel_Block_Mat_exit49_proc88_U0_p_out1_din;
    p_channel25_read <= sobel_sobel_filter_core_U0_rows_read;
    p_channel25_write <= sobel_Block_Mat_exit49_proc88_U0_p_out1_write;
    p_channel26_U_ap_dummy_ce <= ap_const_logic_1;
    p_channel26_din <= sobel_Block_Mat_exit49_proc88_U0_p_out2_din;
    p_channel26_read <= sobel_Threshold_480_640_0_0_U0_thresh_read;
    p_channel26_write <= sobel_Block_Mat_exit49_proc88_U0_p_out2_write;
    p_channel_U_ap_dummy_ce <= ap_const_logic_1;
    p_channel_din <= sobel_Block_Mat_exit49_proc88_U0_p_out_din;
    p_channel_read <= sobel_sobel_filter_core_U0_cols_read;
    p_channel_write <= sobel_Block_Mat_exit49_proc88_U0_p_out_write;
    sobel_AXIvideo2Mat_24_480_640_32_U0_ap_continue <= ap_const_logic_1;
    sobel_AXIvideo2Mat_24_480_640_32_U0_ap_start <= ap_sig_start_in_sobel_AXIvideo2Mat_24_480_640_32_U0_ap_start;
    sobel_AXIvideo2Mat_24_480_640_32_U0_img_cols_V_dout <= img_0_cols_V_channel_dout;
    sobel_AXIvideo2Mat_24_480_640_32_U0_img_cols_V_empty_n <= img_0_cols_V_channel_empty_n;
    sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_0_V_full_n <= img_0_data_stream_0_V_full_n;
    sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_1_V_full_n <= img_0_data_stream_1_V_full_n;
    sobel_AXIvideo2Mat_24_480_640_32_U0_img_data_stream_2_V_full_n <= img_0_data_stream_2_V_full_n;
    sobel_AXIvideo2Mat_24_480_640_32_U0_img_rows_V_dout <= img_0_rows_V_channel_dout;
    sobel_AXIvideo2Mat_24_480_640_32_U0_img_rows_V_empty_n <= img_0_rows_V_channel_empty_n;
    sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TDATA <= video_in_TDATA;
    sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TDEST <= video_in_TDEST;
    sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TID <= video_in_TID;
    sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TKEEP <= video_in_TKEEP;
    sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TLAST <= video_in_TLAST;
    sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TSTRB <= video_in_TSTRB;
    sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TUSER <= video_in_TUSER;
    sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TVALID <= video_in_TVALID;
    sobel_Block_Mat_exit49_proc88_U0_C_XR0C0 <= C_XR0C0;
    sobel_Block_Mat_exit49_proc88_U0_C_XR0C0_out_full_n <= C_XR0C0_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_XR0C1 <= C_XR0C1;
    sobel_Block_Mat_exit49_proc88_U0_C_XR0C1_out_full_n <= C_XR0C1_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_XR0C2 <= C_XR0C2;
    sobel_Block_Mat_exit49_proc88_U0_C_XR0C2_out_full_n <= C_XR0C2_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_XR1C0 <= C_XR1C0;
    sobel_Block_Mat_exit49_proc88_U0_C_XR1C0_out_full_n <= C_XR1C0_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_XR1C1 <= C_XR1C1;
    sobel_Block_Mat_exit49_proc88_U0_C_XR1C1_out_full_n <= C_XR1C1_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_XR1C2 <= C_XR1C2;
    sobel_Block_Mat_exit49_proc88_U0_C_XR1C2_out_full_n <= C_XR1C2_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_XR2C0 <= C_XR2C0;
    sobel_Block_Mat_exit49_proc88_U0_C_XR2C0_out_full_n <= C_XR2C0_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_XR2C1 <= C_XR2C1;
    sobel_Block_Mat_exit49_proc88_U0_C_XR2C1_out_full_n <= C_XR2C1_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_XR2C2 <= C_XR2C2;
    sobel_Block_Mat_exit49_proc88_U0_C_XR2C2_out_full_n <= C_XR2C2_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_YR0C0 <= C_YR0C0;
    sobel_Block_Mat_exit49_proc88_U0_C_YR0C0_out_full_n <= C_YR0C0_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_YR0C1 <= C_YR0C1;
    sobel_Block_Mat_exit49_proc88_U0_C_YR0C1_out_full_n <= C_YR0C1_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_YR0C2 <= C_YR0C2;
    sobel_Block_Mat_exit49_proc88_U0_C_YR0C2_out_full_n <= C_YR0C2_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_YR1C0 <= C_YR1C0;
    sobel_Block_Mat_exit49_proc88_U0_C_YR1C0_out_full_n <= C_YR1C0_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_YR1C1 <= C_YR1C1;
    sobel_Block_Mat_exit49_proc88_U0_C_YR1C1_out_full_n <= C_YR1C1_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_YR1C2 <= C_YR1C2;
    sobel_Block_Mat_exit49_proc88_U0_C_YR1C2_out_full_n <= C_YR1C2_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_YR2C0 <= C_YR2C0;
    sobel_Block_Mat_exit49_proc88_U0_C_YR2C0_out_full_n <= C_YR2C0_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_C_YR2C1 <= C_YR2C1;
    sobel_Block_Mat_exit49_proc88_U0_C_YR2C1_out_full_n <= C_YR2C1_channel_full_n;

    -- sobel_Block_Mat_exit49_proc88_U0_ap_continue assign process. --
    sobel_Block_Mat_exit49_proc88_U0_ap_continue_assign_proc : process(ap_sig_ready_img_3_rows_V_channel_full_n, ap_sig_ready_img_2_rows_V_channel_full_n, ap_sig_ready_img_2_cols_V_channel_full_n, ap_sig_ready_img_3_cols_V_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_img_3_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_img_2_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_img_2_cols_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_img_3_cols_V_channel_full_n))) then 
            sobel_Block_Mat_exit49_proc88_U0_ap_continue <= ap_const_logic_1;
        else 
            sobel_Block_Mat_exit49_proc88_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    sobel_Block_Mat_exit49_proc88_U0_ap_start <= ap_sig_start_in_sobel_Block_Mat_exit49_proc88_U0_ap_start;
    sobel_Block_Mat_exit49_proc88_U0_c_high_thresh <= c_high_thresh;
    sobel_Block_Mat_exit49_proc88_U0_c_high_thresh_out_full_n <= c_high_thresh_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_c_invert <= c_invert;
    sobel_Block_Mat_exit49_proc88_U0_c_invert_out_full_n <= c_invert_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_c_low_thresh <= c_low_thresh;
    sobel_Block_Mat_exit49_proc88_U0_c_low_thresh_out_full_n <= c_low_thresh_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_cols <= cols;
    
    sobel_Block_Mat_exit49_proc88_U0_empty_proc : process(threshold)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable sobel_Block_Mat_exit49_proc88_U0_empty_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_8(5 - 1 downto 0);
        v0_cpy := threshold;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_8(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for sobel_Block_Mat_exit49_proc88_U0_empty_i in 0 to 32-1 loop
                v0_cpy(sobel_Block_Mat_exit49_proc88_U0_empty_i) := threshold(32-1-sobel_Block_Mat_exit49_proc88_U0_empty_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        sobel_Block_Mat_exit49_proc88_U0_empty <= resvalue(8-1 downto 0);
    end process;

    
    sobel_Block_Mat_exit49_proc88_U0_empty_3_proc : process(cols)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable sobel_Block_Mat_exit49_proc88_U0_empty_3_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_A(5 - 1 downto 0);
        v0_cpy := cols;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_A(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for sobel_Block_Mat_exit49_proc88_U0_empty_3_i in 0 to 32-1 loop
                v0_cpy(sobel_Block_Mat_exit49_proc88_U0_empty_3_i) := cols(32-1-sobel_Block_Mat_exit49_proc88_U0_empty_3_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        sobel_Block_Mat_exit49_proc88_U0_empty_3 <= resvalue(10-1 downto 0);
    end process;

    
    sobel_Block_Mat_exit49_proc88_U0_empty_4_proc : process(rows)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable sobel_Block_Mat_exit49_proc88_U0_empty_4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_9(5 - 1 downto 0);
        v0_cpy := rows;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_9(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for sobel_Block_Mat_exit49_proc88_U0_empty_4_i in 0 to 32-1 loop
                v0_cpy(sobel_Block_Mat_exit49_proc88_U0_empty_4_i) := rows(32-1-sobel_Block_Mat_exit49_proc88_U0_empty_4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        sobel_Block_Mat_exit49_proc88_U0_empty_4 <= resvalue(9-1 downto 0);
    end process;

    sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out2_full_n <= img_0_cols_V_channel24_full_n;
    sobel_Block_Mat_exit49_proc88_U0_img_0_cols_V_out_full_n <= img_0_cols_V_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out1_full_n <= img_0_rows_V_channel23_full_n;
    sobel_Block_Mat_exit49_proc88_U0_img_0_rows_V_out_full_n <= img_0_rows_V_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_p_out1_full_n <= p_channel25_full_n;
    sobel_Block_Mat_exit49_proc88_U0_p_out2_full_n <= p_channel26_full_n;
    sobel_Block_Mat_exit49_proc88_U0_p_out_full_n <= p_channel_full_n;
    sobel_Block_Mat_exit49_proc88_U0_rows <= rows;
    sobel_CONTROL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    sobel_GaussianBlur_U0_ap_continue <= ap_const_logic_1;
    sobel_GaussianBlur_U0_p_dst_data_stream_0_V_full_n <= img_1_data_stream_0_V_full_n;
    sobel_GaussianBlur_U0_p_dst_data_stream_1_V_full_n <= img_1_data_stream_1_V_full_n;
    sobel_GaussianBlur_U0_p_dst_data_stream_2_V_full_n <= img_1_data_stream_2_V_full_n;
    sobel_GaussianBlur_U0_p_src_cols_V_dout <= img_0_cols_V_channel24_dout;
    sobel_GaussianBlur_U0_p_src_cols_V_empty_n <= img_0_cols_V_channel24_empty_n;
    sobel_GaussianBlur_U0_p_src_data_stream_0_V_dout <= img_0_data_stream_0_V_dout;
    sobel_GaussianBlur_U0_p_src_data_stream_0_V_empty_n <= img_0_data_stream_0_V_empty_n;
    sobel_GaussianBlur_U0_p_src_data_stream_1_V_dout <= img_0_data_stream_1_V_dout;
    sobel_GaussianBlur_U0_p_src_data_stream_1_V_empty_n <= img_0_data_stream_1_V_empty_n;
    sobel_GaussianBlur_U0_p_src_data_stream_2_V_dout <= img_0_data_stream_2_V_dout;
    sobel_GaussianBlur_U0_p_src_data_stream_2_V_empty_n <= img_0_data_stream_2_V_empty_n;
    sobel_GaussianBlur_U0_p_src_rows_V_dout <= img_0_rows_V_channel23_dout;
    sobel_GaussianBlur_U0_p_src_rows_V_empty_n <= img_0_rows_V_channel23_empty_n;
    sobel_Mat2AXIvideo_8_480_640_0_U0_ap_continue <= ap_sig_hs_continue;
    sobel_Mat2AXIvideo_8_480_640_0_U0_ap_start <= (img_3_rows_V_channel_empty_n and img_3_cols_V_channel_empty_n);
    sobel_Mat2AXIvideo_8_480_640_0_U0_img_cols_V_read <= img_3_cols_V_channel_dout;
    sobel_Mat2AXIvideo_8_480_640_0_U0_img_data_stream_V_dout <= img_3_data_stream_0_V_dout;
    sobel_Mat2AXIvideo_8_480_640_0_U0_img_data_stream_V_empty_n <= img_3_data_stream_0_V_empty_n;
    sobel_Mat2AXIvideo_8_480_640_0_U0_img_rows_V_read <= img_3_rows_V_channel_dout;
    sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TREADY <= video_out_TREADY;
    sobel_Threshold_480_640_0_0_U0_ap_continue <= ap_const_logic_1;
    sobel_Threshold_480_640_0_0_U0_ap_start <= (img_2_rows_V_channel_empty_n and img_2_cols_V_channel_empty_n);
    sobel_Threshold_480_640_0_0_U0_dst_data_stream_V_full_n <= img_3_data_stream_0_V_full_n;
    sobel_Threshold_480_640_0_0_U0_src_cols_V_read <= img_2_cols_V_channel_dout;
    sobel_Threshold_480_640_0_0_U0_src_data_stream_V_dout <= img_2_data_stream_0_V_dout;
    sobel_Threshold_480_640_0_0_U0_src_data_stream_V_empty_n <= img_2_data_stream_0_V_empty_n;
    sobel_Threshold_480_640_0_0_U0_src_rows_V_read <= img_2_rows_V_channel_dout;
    sobel_Threshold_480_640_0_0_U0_thresh_dout <= p_channel26_dout;
    sobel_Threshold_480_640_0_0_U0_thresh_empty_n <= p_channel26_empty_n;
    sobel_sobel_filter_core_U0_C_XR0C0_dout <= C_XR0C0_channel_dout;
    sobel_sobel_filter_core_U0_C_XR0C0_empty_n <= C_XR0C0_channel_empty_n;
    sobel_sobel_filter_core_U0_C_XR0C1_dout <= C_XR0C1_channel_dout;
    sobel_sobel_filter_core_U0_C_XR0C1_empty_n <= C_XR0C1_channel_empty_n;
    sobel_sobel_filter_core_U0_C_XR0C2_dout <= C_XR0C2_channel_dout;
    sobel_sobel_filter_core_U0_C_XR0C2_empty_n <= C_XR0C2_channel_empty_n;
    sobel_sobel_filter_core_U0_C_XR1C0_dout <= C_XR1C0_channel_dout;
    sobel_sobel_filter_core_U0_C_XR1C0_empty_n <= C_XR1C0_channel_empty_n;
    sobel_sobel_filter_core_U0_C_XR1C1_dout <= C_XR1C1_channel_dout;
    sobel_sobel_filter_core_U0_C_XR1C1_empty_n <= C_XR1C1_channel_empty_n;
    sobel_sobel_filter_core_U0_C_XR1C2_dout <= C_XR1C2_channel_dout;
    sobel_sobel_filter_core_U0_C_XR1C2_empty_n <= C_XR1C2_channel_empty_n;
    sobel_sobel_filter_core_U0_C_XR2C0_dout <= C_XR2C0_channel_dout;
    sobel_sobel_filter_core_U0_C_XR2C0_empty_n <= C_XR2C0_channel_empty_n;
    sobel_sobel_filter_core_U0_C_XR2C1_dout <= C_XR2C1_channel_dout;
    sobel_sobel_filter_core_U0_C_XR2C1_empty_n <= C_XR2C1_channel_empty_n;
    sobel_sobel_filter_core_U0_C_XR2C2_dout <= C_XR2C2_channel_dout;
    sobel_sobel_filter_core_U0_C_XR2C2_empty_n <= C_XR2C2_channel_empty_n;
    sobel_sobel_filter_core_U0_C_YR0C0_dout <= C_YR0C0_channel_dout;
    sobel_sobel_filter_core_U0_C_YR0C0_empty_n <= C_YR0C0_channel_empty_n;
    sobel_sobel_filter_core_U0_C_YR0C1_dout <= C_YR0C1_channel_dout;
    sobel_sobel_filter_core_U0_C_YR0C1_empty_n <= C_YR0C1_channel_empty_n;
    sobel_sobel_filter_core_U0_C_YR0C2_dout <= C_YR0C2_channel_dout;
    sobel_sobel_filter_core_U0_C_YR0C2_empty_n <= C_YR0C2_channel_empty_n;
    sobel_sobel_filter_core_U0_C_YR1C0_dout <= C_YR1C0_channel_dout;
    sobel_sobel_filter_core_U0_C_YR1C0_empty_n <= C_YR1C0_channel_empty_n;
    sobel_sobel_filter_core_U0_C_YR1C1_dout <= C_YR1C1_channel_dout;
    sobel_sobel_filter_core_U0_C_YR1C1_empty_n <= C_YR1C1_channel_empty_n;
    sobel_sobel_filter_core_U0_C_YR1C2_dout <= C_YR1C2_channel_dout;
    sobel_sobel_filter_core_U0_C_YR1C2_empty_n <= C_YR1C2_channel_empty_n;
    sobel_sobel_filter_core_U0_C_YR2C0_dout <= C_YR2C0_channel_dout;
    sobel_sobel_filter_core_U0_C_YR2C0_empty_n <= C_YR2C0_channel_empty_n;
    sobel_sobel_filter_core_U0_C_YR2C1_dout <= C_YR2C1_channel_dout;
    sobel_sobel_filter_core_U0_C_YR2C1_empty_n <= C_YR2C1_channel_empty_n;
    sobel_sobel_filter_core_U0_ap_continue <= ap_const_logic_1;
    sobel_sobel_filter_core_U0_c_high_thresh_dout <= c_high_thresh_channel_dout;
    sobel_sobel_filter_core_U0_c_high_thresh_empty_n <= c_high_thresh_channel_empty_n;
    sobel_sobel_filter_core_U0_c_invert_dout <= c_invert_channel_dout;
    sobel_sobel_filter_core_U0_c_invert_empty_n <= c_invert_channel_empty_n;
    sobel_sobel_filter_core_U0_c_low_thresh_dout <= c_low_thresh_channel_dout;
    sobel_sobel_filter_core_U0_c_low_thresh_empty_n <= c_low_thresh_channel_empty_n;
    sobel_sobel_filter_core_U0_cols_dout <= p_channel_dout;
    sobel_sobel_filter_core_U0_cols_empty_n <= p_channel_empty_n;
    sobel_sobel_filter_core_U0_dst_data_stream_V_full_n <= img_2_data_stream_0_V_full_n;
    sobel_sobel_filter_core_U0_rows_dout <= p_channel25_dout;
    sobel_sobel_filter_core_U0_rows_empty_n <= p_channel25_empty_n;
    sobel_sobel_filter_core_U0_src_data_stream_0_V_dout <= img_1_data_stream_0_V_dout;
    sobel_sobel_filter_core_U0_src_data_stream_0_V_empty_n <= img_1_data_stream_0_V_empty_n;
    sobel_sobel_filter_core_U0_src_data_stream_1_V_dout <= img_1_data_stream_1_V_dout;
    sobel_sobel_filter_core_U0_src_data_stream_1_V_empty_n <= img_1_data_stream_1_V_empty_n;
    sobel_sobel_filter_core_U0_src_data_stream_2_V_dout <= img_1_data_stream_2_V_dout;
    sobel_sobel_filter_core_U0_src_data_stream_2_V_empty_n <= img_1_data_stream_2_V_empty_n;
    video_in_TREADY <= sobel_AXIvideo2Mat_24_480_640_32_U0_video_in_TREADY;
    video_out_TDATA <= sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TDATA;
    video_out_TDEST <= sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TDEST;
    video_out_TID <= sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TID;
    video_out_TKEEP <= sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TKEEP;
    video_out_TLAST <= sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TLAST;
    video_out_TSTRB <= sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TSTRB;
    video_out_TUSER <= sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TUSER;
    video_out_TVALID <= sobel_Mat2AXIvideo_8_480_640_0_U0_video_out_TVALID;
end behav;
